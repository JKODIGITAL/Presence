"""
WebRTC Server com aiortc + GStreamer CUDA/NVDEC
Para streaming de baixa lat√™ncia com reconhecimento facial em tempo real
"""

import asyncio
import json
import time
import uuid
import weakref
import sys
import os
from typing import Dict, Optional, Any, List
from datetime import datetime
from multiprocessing import Queue, Process, Event
import threading
import aiohttp
import ssl
from concurrent.futures import ThreadPoolExecutor
import socket

import numpy as np
from aiohttp import web, WSMsgType
from aiohttp.web_ws import WebSocketResponse
from loguru import logger
import socketio

# APLICAR PATCH GLOBAL DE PORTAS UDP ANTES DE IMPORTAR AIORTC
def apply_global_udp_port_patch():
    """Aplicar patch global ANTES de qualquer import do aiortc usando subclassing"""
    import os
    import socket
    
    udp_range = os.environ.get('AIORTC_UDP_PORT_RANGE', '40000-40100')
    min_port, max_port = map(int, udp_range.split('-'))
    
    if not hasattr(socket, '_global_udp_patch_applied'):
        socket._global_udp_patch_applied = True
        OriginalSocket = socket.socket
        
        class PortControlledSocket(OriginalSocket):
            """Socket wrapper que controla portas UDP"""
            
            def __init__(self, family=socket.AF_INET, type=socket.SOCK_STREAM, proto=0, fileno=None):
                super().__init__(family, type, proto, fileno)
                self._is_udp = (family == socket.AF_INET and type == socket.SOCK_DGRAM)
            
            def bind(self, address):
                if self._is_udp:
                    host, port = address
                    
                    if port == 0:
                        # Porta autom√°tica - escolher do range
                        for try_port in range(min_port, max_port + 1):
                            try:
                                super().bind((host, try_port))
                                print(f"üéØ UDP AUTO-BIND: {host}:{try_port}")
                                return
                            except OSError:
                                continue
                        # Fallback se range esgotado
                        print(f"‚ö†Ô∏è Range {udp_range} esgotado, usando porta autom√°tica")
                        super().bind(address)
                    elif not (min_port <= port <= max_port):
                        # Porta fora do range - for√ßar para range
                        forced_port = min_port
                        print(f"üö´ UDP FORA DO RANGE: {host}:{port} ‚Üí FOR√áADO para {host}:{forced_port}")
                        super().bind((host, forced_port))
                    else:
                        # Porta no range - permitir
                        print(f"‚úÖ UDP NO RANGE: {host}:{port}")
                        super().bind(address)
                else:
                    # N√£o √© UDP - bind normal
                    super().bind(address)
        
        # Substituir globalmente
        socket.socket = PortControlledSocket
        print(f"[UDP-PATCH] GLOBAL UDP PATCH (SUBCLASS) APLICADO: {udp_range}")

# Aplicar patch IMEDIATAMENTE
apply_global_udp_port_patch()

# PATCH CR√çTICO: Interceptar asyncio.create_datagram_endpoint
def apply_asyncio_patch():
    """Patch direto no asyncio.create_datagram_endpoint que √© usado pelo aioice"""
    import asyncio
    import os
    
    udp_range = os.environ.get('AIORTC_UDP_PORT_RANGE', '40000-40100')
    min_port, max_port = map(int, udp_range.split('-'))
    
    if not hasattr(asyncio, '_original_create_datagram_endpoint'):
        # Salvar fun√ß√£o original
        asyncio._original_create_datagram_endpoint = asyncio.get_event_loop().create_datagram_endpoint
        
        async def patched_create_datagram_endpoint(protocol_factory, local_addr=None, remote_addr=None, **kwargs):
            # Se tem local_addr com porta 0, for√ßar para nosso range
            if local_addr and len(local_addr) == 2 and local_addr[1] == 0:
                host = local_addr[0]
                
                # Tentar portas do nosso range
                for try_port in range(min_port, max_port + 1):
                    try:
                        result = await asyncio._original_create_datagram_endpoint(
                            protocol_factory, 
                            local_addr=(host, try_port), 
                            remote_addr=remote_addr, 
                            **kwargs
                        )
                        print(f"üéØ ASYNCIO INTERCEPTADO: UDP {host}:{try_port}")
                        return result
                    except OSError:
                        continue
                
                # Se falhou, usar original
                print(f"‚ö†Ô∏è Range {udp_range} esgotado, usando porta autom√°tica")
            
            return await asyncio._original_create_datagram_endpoint(
                protocol_factory, local_addr=local_addr, remote_addr=remote_addr, **kwargs
            )
        
        # Aplicar patch em todas as inst√¢ncias de loop
        loop = asyncio.get_event_loop()
        loop.create_datagram_endpoint = patched_create_datagram_endpoint
        
        # Patch tamb√©m no m√≥dulo para novos loops
        original_new_event_loop = asyncio.new_event_loop
        def patched_new_event_loop():
            loop = original_new_event_loop()
            loop.create_datagram_endpoint = patched_create_datagram_endpoint
            return loop
        asyncio.new_event_loop = patched_new_event_loop
        
        print(f"[ASYNCIO-PATCH] DATAGRAM ENDPOINT PATCHED: {udp_range}")

apply_asyncio_patch()

# Enable detailed RTP/SRTP logging for debugging
import logging
logging.basicConfig(level=logging.DEBUG)
aiortc_logger = logging.getLogger('aiortc')
aiortc_logger.setLevel(logging.DEBUG)
# Habilitar logs espec√≠ficos para DTLS
dtls_logger = logging.getLogger('aiortc.dtls')
dtls_logger.setLevel(logging.DEBUG)
# Habilitar logs espec√≠ficos para RTP
rtp_logger = logging.getLogger('aiortc.rtp')
rtp_logger.setLevel(logging.DEBUG)

# aiortc imports
from aiortc import RTCPeerConnection, RTCSessionDescription, MediaStreamTrack, RTCIceCandidate, RTCConfiguration, RTCIceServer
from aiortc.contrib.media import MediaRelay
import av
from aiortc.rtcrtpsender import RTCRtpSender

# GStreamer imports (opcional)
GSTREAMER_AVAILABLE = False
Gst = None
GstApp = None
GLib = None

if not os.environ.get('DISABLE_GSTREAMER', '').lower() == 'true':
    try:
        import gi
        gi.require_version('Gst', '1.0')
        gi.require_version('GstApp', '1.0')
        from gi.repository import Gst, GstApp, GLib
        
        if not Gst.is_initialized():
            Gst.init(None)
        
        GSTREAMER_AVAILABLE = True
        logger.info(f"GStreamer inicializado: {Gst.version_string()}")
    except Exception as e:
        logger.warning(f"GStreamer n√£o dispon√≠vel (fallback aiortc ativo): {e}")
        GSTREAMER_AVAILABLE = False
        # Ensure GStreamer objects are None if import fails
        Gst = None
        GstApp = None
        GLib = None
else:
    logger.info("GStreamer DESABILITADO por configura√ß√£o (DISABLE_GSTREAMER=true)")


# Base VideoTrack classes
class FallbackVideoTrack(MediaStreamTrack):
    """Fallback video track for when GStreamer is not available"""
    kind = "video"
    
    def __init__(self, camera_config: Dict[str, Any], recognition_queue: Queue):
        super().__init__()
        self.camera_config = camera_config
        self.recognition_queue = recognition_queue
        self.is_running = True
        self.frame_count = 0
        self.use_gstreamer = False
        logger.info(f"Using fallback video track for {camera_config.get('id', 'unknown')}")
        
    def stop(self):
        """Stop the track"""
        self.is_running = False
        logger.info("Fallback video track stopped")
        
    async def recv(self):
        """Generate test frames"""
        if not self.is_running:
            raise Exception("Track is stopped")
            
        # Generate a simple test frame (solid color)
        import time
        pts, time_base = await self.next_timestamp()
        
        # Create a simple colored frame using PyAV
        frame = av.VideoFrame.from_ndarray(
            np.full((480, 640, 3), [0, 100, 200], dtype=np.uint8), format='rgb24'
        )
        frame.pts = pts
        frame.time_base = time_base
        
        self.frame_count += 1
        
        # Small delay to simulate camera frame rate
        await asyncio.sleep(1/15)  # ~15 FPS
        
        return frame

if GSTREAMER_AVAILABLE:
    class GStreamerVideoTrack(MediaStreamTrack):
        """
        Track de v√≠deo usando GStreamer com CUDA/NVDEC para decodifica√ß√£o
        """
        kind = "video"

        def __init__(self, camera_config: Dict[str, Any], recognition_queue: Queue):
        super().__init__()
        self.camera_config = camera_config
        self.recognition_queue = recognition_queue
        self.pipeline = None
        self.appsink = None
        self.is_running = False
        self.frame_count = 0
        self.recognition_frame_skip = 15  # Enviar 1 a cada 15 frames para reconhecimento
        
        # Configura√ß√µes de performance profissional
        self.target_fps = camera_config.get('fps_limit', 25)  # 25 FPS para melhor qualidade
        self.width = 1280  # Resolu√ß√£o HD para melhor qualidade
        self.height = 720
        self.use_cuda = False
        self.reconnect_attempts = 0
        self.max_reconnect_attempts = 5
        self.pipeline_health_check_interval = 30  # segundos
        
        # Inicializar frame atual
        self._current_frame = None
        self._frame_received = False
        
        # Determinar se usar GStreamer ou frames de teste
        camera_type = camera_config.get('type', 'test')
        
        if camera_type == 'test' or not GSTREAMER_AVAILABLE:
            self.use_gstreamer = False
            self.is_running = True  # Marcar como rodando para frames de teste
            logger.info(f"Usando frames de teste para {camera_config.get('id', 'unknown')}")
        else:
            self.use_gstreamer = True
            # Inicializar pipeline GStreamer para RTSP
            self._setup_gstreamer_pipeline()
            logger.info(f"Pipeline GStreamer configurado para {camera_type}: {camera_config.get('url', 'N/A')}")
        
    def _setup_gstreamer_pipeline(self):
        """Configurar pipeline GStreamer otimizado com CUDA"""
        if not GSTREAMER_AVAILABLE:
            logger.error("GStreamer n√£o dispon√≠vel")
            return
            
        camera_url = self.camera_config.get('url', '')
        camera_type = self.camera_config.get('type', 'rtsp')
        use_test_fallback = self.camera_config.get('use_test_source_fallback', False)
        
        # For√ßa usar test source se solicitado, para debug, ou se n√£o h√° c√¢mera real
        if camera_type == 'test' or camera_url == 'test://source' or use_test_fallback:
            # Pipeline de teste com videotestsrc
            pipeline_str = f"""
                videotestsrc pattern=0 is-live=true
                ! video/x-raw,width={self.width},height={self.height},framerate={self.target_fps}/1,format=RGB
                ! appsink name=sink 
                    emit-signals=true 
                    max-buffers=2 
                    drop=true 
                    sync=false
            """
        elif camera_type == 'webcam':
            # Pipeline para webcam
            device = camera_url if camera_url.startswith('/dev/') else f'/dev/video{camera_url}'
            pipeline_str = f"""
                v4l2src device={device}
                ! video/x-raw,width={self.width},height={self.height},framerate={self.target_fps}/1
                ! videoconvert
                ! video/x-raw,format=RGB
                ! appsink name=sink 
                    emit-signals=true 
                    max-buffers=2 
                    drop=true 
                    sync=false
            """
        else:
            # Pipeline RTSP PROFISSIONAL com baixa lat√™ncia e alta estabilidade
            pipeline_str = f"""
                rtspsrc location="{camera_url}"
                    latency=50
                    buffer-mode=0
                    drop-on-latency=true
                    retry=5
                    timeout=10
                    udp-reconnect=true
                    tcp-timeout=20000000
                    do-retransmission=true
                ! rtph264depay
                ! h264parse
                    config-interval=-1
                ! nvh264dec
                    max-display-delay=0
                ! nvvideoconvert
                ! video/x-raw,format=RGB,width={self.width},height={self.height}
                ! videorate
                    max-rate={self.target_fps}
                    drop-only=true
                ! video/x-raw,framerate={self.target_fps}/1
                ! appsink name=sink 
                    emit-signals=true 
                    max-buffers=1
                    drop=true 
                    sync=false
                    async=false
            """
            
            # Fallback CPU com otimiza√ß√µes de lat√™ncia
            fallback_pipeline = f"""
                rtspsrc location="{camera_url}"
                    latency=50
                    buffer-mode=0
                    drop-on-latency=true
                    retry=5
                    timeout=10
                    udp-reconnect=true
                    tcp-timeout=20000000
                ! rtph264depay
                ! h264parse
                    config-interval=-1
                ! avdec_h264
                    max-threads=2
                    output-corrupt=false
                ! videoconvert
                    n-threads=2
                ! video/x-raw,format=RGB,width={self.width},height={self.height}
                ! videorate
                    max-rate={self.target_fps}
                    drop-only=true
                ! video/x-raw,framerate={self.target_fps}/1
                ! appsink name=sink 
                    emit-signals=true 
                    max-buffers=1
                    drop=true 
                    sync=false
                    async=false
            """
        
        # Tentar pipeline otimizado com detec√ß√£o inteligente de CUDA
        cuda_available = self._check_cuda_availability()
        
        if cuda_available and camera_type == 'rtsp':
            try:
                self.pipeline = Gst.parse_launch(pipeline_str.strip())
                self.use_cuda = True
                logger.info(f"‚ú® Pipeline CUDA/NVDEC criado para {self.camera_config.get('id', 'unknown')}")
                logger.info(f"üöÄ Acelera√ß√£o GPU ativa - lat√™ncia ultra-baixa")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è CUDA pipeline falhou, usando CPU fallback: {e}")
                try:
                    self.pipeline = Gst.parse_launch(fallback_pipeline.strip())
                    self.use_cuda = False
                    logger.info(f"üîÑ Pipeline CPU fallback criado para {self.camera_config.get('id', 'unknown')}")
                except Exception as e2:
                    logger.error(f"‚ùå Falha cr√≠tica ao criar pipeline: {e2}")
                    self._create_error_pipeline()
                    return
        else:
            try:
                if camera_type == 'rtsp':
                    self.pipeline = Gst.parse_launch(fallback_pipeline.strip())
                else:
                    self.pipeline = Gst.parse_launch(pipeline_str.strip())
                self.use_cuda = False
                logger.info(f"üì∫ Pipeline {camera_type} criado para {self.camera_config.get('id', 'unknown')}")
            except Exception as e:
                logger.error(f"‚ùå Falha ao criar pipeline {camera_type}: {e}")
                self._create_error_pipeline()
                return
        
        # Configurar appsink
        self.appsink = self.pipeline.get_by_name('sink')
        if not self.appsink:
            logger.error("Falha ao obter appsink")
            return
            
        # Conectar callback
        self.appsink.connect('new-sample', self._on_new_sample)
        
        # Configurar bus para monitorar erros
        bus = self.pipeline.get_bus()
        bus.add_signal_watch()
        bus.connect('message', self._on_bus_message)
        
        logger.info(f"üé¨ Pipeline GStreamer configurado: {camera_type} | CUDA: {getattr(self, 'use_cuda', False)}")
        
        # Configurar pipeline para baixa lat√™ncia se solicitado
        if camera_config.get('low_latency', True):
            self._configure_low_latency_pipeline()
        
        # Configurar timeouts e health checks
        self._setup_health_monitoring()
    
    def _on_bus_message(self, bus, message):
        """Callback para mensagens do bus GStreamer"""
        msg_type = message.type
        camera_info = f"{self.camera_config.get('type', 'unknown')}:{self.camera_config.get('id', 'unknown')}"
        
        if msg_type == Gst.MessageType.ERROR:
            err, debug = message.parse_error()
            logger.error(f"‚ùå Erro no pipeline GStreamer [{camera_info}]: {err}")
            logger.debug(f"Debug info: {debug}")
            
            # Sistema inteligente de fallback para erros
            if self.camera_config.get('type') == 'rtsp':
                logger.warning(f"‚ö†Ô∏è RTSP falhou para {camera_info}, ativando sistema de reconex√£o")
                
                # Tentar reconex√£o autom√°tica
                if self.reconnect_attempts < self.max_reconnect_attempts:
                    logger.info(f"üîÑ Agendando reconex√£o autom√°tica em 5 segundos...")
                    import threading
                    threading.Timer(5.0, self._attempt_pipeline_reconnect).start()
                else:
                    logger.error(f"‚ùå M√°ximo de tentativas atingido, alternando para fallback")
                    self._switch_to_fallback_mode()
            else:
                self.stop()
        elif msg_type == Gst.MessageType.WARNING:
            warn, debug = message.parse_warning()
            logger.warning(f"‚ö†Ô∏è Warning no pipeline [{camera_info}]: {warn}")
        elif msg_type == Gst.MessageType.EOS:
            logger.info(f"üì∫ End of stream no pipeline [{camera_info}]")
            self.stop()
        elif msg_type == Gst.MessageType.STATE_CHANGED:
            old_state, new_state, pending_state = message.parse_state_changed()
            if message.src == self.pipeline:
                logger.info(f"üîÑ Pipeline [{camera_info}] state: {old_state.value_name} ‚Üí {new_state.value_name}")
        
        return True
    
    def _configure_low_latency_pipeline(self):
        """Configurar pipeline para lat√™ncia ultra-baixa"""
        try:
            if not self.pipeline:
                return
            
            # Configurar elementos para baixa lat√™ncia
            elements_to_configure = [
                ('nvh264dec', {'max-display-delay': 0, 'low-latency': True}),
                ('avdec_h264', {'max-threads': 1, 'skip-frame': 0}),
                ('x264enc', {'tune': 'zerolatency', 'speed-preset': 'ultrafast', 'bitrate': 2000}),
                ('nvh264enc', {'preset': 'low-latency-hq', 'rc-mode': 'cbr', 'bitrate': 2000}),
                ('videorate', {'max-rate': self.target_fps, 'drop-only': True}),
                ('queue', {'max-size-buffers': 1, 'max-size-time': 0, 'max-size-bytes': 0, 'leaky': 'downstream'}),
            ]
            
            # Iterar atrav√©s dos elementos do pipeline
            iterator = self.pipeline.iterate_elements()
            while True:
                result, element = iterator.next()
                if result != Gst.IteratorResult.OK:
                    break
                
                element_name = element.get_factory().get_name()
                
                # Configurar elemento se estiver na lista
                for target_name, properties in elements_to_configure:
                    if target_name in element_name:
                        for prop_name, prop_value in properties.items():
                            try:
                                if element.get_property(prop_name) is not None:
                                    element.set_property(prop_name, prop_value)
                                    logger.debug(f"üöÄ {element_name}.{prop_name} = {prop_value}")
                            except Exception as e:
                                logger.debug(f"‚ö†Ô∏è N√£o foi poss√≠vel configurar {element_name}.{prop_name}: {e}")
            
            logger.info("üöÄ Pipeline configurado para LAT√äNCIA ULTRA-BAIXA")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao configurar baixa lat√™ncia: {e}")
    
    def _check_cuda_availability(self):
        """Verificar se CUDA/NVDEC est√° dispon√≠vel"""
        try:
            # Verificar se os plugins NVIDIA est√£o dispon√≠veis
            nvh264dec = Gst.ElementFactory.find('nvh264dec')
            nvvideoconvert = Gst.ElementFactory.find('nvvideoconvert')
            
            if nvh264dec and nvvideoconvert:
                logger.info("‚ú® CUDA/NVDEC plugins dispon√≠veis")
                return True
            else:
                logger.info("üíª CUDA/NVDEC n√£o dispon√≠vel, usando CPU")
                return False
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao verificar CUDA: {e}")
            return False
    
    def _create_error_pipeline(self):
        """Criar pipeline de erro como fallback final"""
        try:
            error_pipeline = f"""
                videotestsrc pattern=2 is-live=true
                ! video/x-raw,width={self.width},height={self.height},framerate={self.target_fps}/1,format=RGB
                ! textoverlay text="ERRO: C√¢mera {self.camera_config.get('id', 'ERR')} indispon√≠vel"
                    valignment=center halignment=center font-desc="Sans 24"
                ! appsink name=sink 
                    emit-signals=true 
                    max-buffers=1
                    drop=true 
                    sync=false
            """
            self.pipeline = Gst.parse_launch(error_pipeline.strip())
            self.use_cuda = False
            logger.warning(f"‚ö†Ô∏è Pipeline de erro criado para {self.camera_config.get('id')}")
        except Exception as e:
            logger.error(f"‚ùå Falha cr√≠tica ao criar pipeline de erro: {e}")
    
    def _setup_health_monitoring(self):
        """Configurar monitoramento de sa√∫de do pipeline"""
        self.last_frame_time = time.time()
        self.frames_received = 0
        self.connection_stable = False
        
        # Agendar verifica√ß√£o peri√≥dica de sa√∫de
        import threading
        def health_check():
            while self.is_running:
                time.sleep(self.pipeline_health_check_interval)
                self._check_pipeline_health()
        
        health_thread = threading.Thread(target=health_check, daemon=True)
        health_thread.start()
        logger.info("üë®‚Äç‚öïÔ∏è Monitoramento de sa√∫de do pipeline ativado")
    
    def _check_pipeline_health(self):
        """Verificar sa√∫de do pipeline e reconectar se necess√°rio"""
        try:
            current_time = time.time()
            time_since_last_frame = current_time - self.last_frame_time
            
            # Se n√£o recebeu frames por mais de 15 segundos
            if time_since_last_frame > 15 and self.use_gstreamer:
                logger.warning(f"‚ö†Ô∏è Pipeline sem frames por {time_since_last_frame:.1f}s")
                
                if self.reconnect_attempts < self.max_reconnect_attempts:
                    self._attempt_reconnect()
                else:
                    logger.error("‚ùå M√°ximo de tentativas de reconex√£o atingido")
                    self._switch_to_fallback_mode()
            
            # Log peri√≥dico de estat√≠sticas
            if time_since_last_frame < 5:
                fps = self.frames_received / max(1, current_time - (self.last_frame_time - time_since_last_frame))
                logger.info(f"üìä Pipeline saud√°vel: {fps:.1f} FPS | {self.frames_received} frames")
                self.connection_stable = True
            else:
                self.connection_stable = False
                
        except Exception as e:
            logger.error(f"‚ùå Erro no health check: {e}")
    
    def _attempt_reconnect(self):
        """Tentar reconectar o pipeline RTSP"""
        self.reconnect_attempts += 1
        logger.info(f"üîÑ Tentativa de reconex√£o {self.reconnect_attempts}/{self.max_reconnect_attempts}")
        
        try:
            # Parar pipeline atual
            if self.pipeline:
                self.pipeline.set_state(Gst.State.NULL)
                time.sleep(1)
            
            # Recriar pipeline
            self._setup_gstreamer_pipeline()
            
            # Reiniciar
            if self.pipeline:
                ret = self.pipeline.set_state(Gst.State.PLAYING)
                if ret == Gst.StateChangeReturn.SUCCESS:
                    logger.info("‚úÖ Reconex√£o bem-sucedida")
                    self.reconnect_attempts = 0
                    self.last_frame_time = time.time()
                else:
                    logger.error("‚ùå Falha na reconex√£o")
        except Exception as e:
            logger.error(f"‚ùå Erro durante reconex√£o: {e}")
    
    def _attempt_pipeline_reconnect(self):
        """Tentar reconex√£o do pipeline (m√©todo thread-safe)"""
        try:
            self.reconnect_attempts += 1
            camera_info = f"{self.camera_config.get('type')}:{self.camera_config.get('id', 'unknown')}"
            logger.info(f"üîÑ Reconex√£o autom√°tica {self.reconnect_attempts}/{self.max_reconnect_attempts} para {camera_info}")
            
            # Parar pipeline atual completamente
            if self.pipeline:
                self.pipeline.set_state(Gst.State.NULL)
                time.sleep(2)  # Aguardar limpeza completa
            
            # Resetar vari√°veis de estado
            self._current_frame = None
            self._frame_received = False
            
            # Recriar pipeline do zero
            self._setup_gstreamer_pipeline()
            
            # Tentar iniciar novamente
            if self.pipeline:
                ret = self.pipeline.set_state(Gst.State.PLAYING)
                if ret == Gst.StateChangeReturn.SUCCESS:
                    logger.info(f"‚úÖ Reconex√£o autom√°tica bem-sucedida para {camera_info}")
                    self.reconnect_attempts = 0
                    self.last_frame_time = time.time()
                    self.connection_stable = True
                    return True
                else:
                    logger.error(f"‚ùå Falha na reconex√£o autom√°tica para {camera_info}")
            
            # Se ainda temos tentativas, agendar pr√≥xima
            if self.reconnect_attempts < self.max_reconnect_attempts:
                retry_delay = min(10 * self.reconnect_attempts, 60)  # Backoff exponencial limitado
                logger.info(f"üîÑ Pr√≥xima tentativa em {retry_delay} segundos...")
                import threading
                threading.Timer(retry_delay, self._attempt_pipeline_reconnect).start()
            else:
                logger.error(f"‚ùå Esgotadas tentativas de reconex√£o para {camera_info}")
                self._switch_to_fallback_mode()
                
        except Exception as e:
            logger.error(f"‚ùå Erro cr√≠tico na reconex√£o autom√°tica: {e}")
            self._switch_to_fallback_mode()
    
    def _switch_to_fallback_mode(self):
        """Alternar para modo de fallback (frames de teste)"""
        logger.warning("‚ö†Ô∏è Alternando para modo fallback - frames de teste")
        self.use_gstreamer = False
        self.is_running = True
        
        # Parar pipeline GStreamer
        if self.pipeline:
            self.pipeline.set_state(Gst.State.NULL)
            self.pipeline = None
    
    def _on_new_sample(self, appsink):
        """Callback para novos frames do GStreamer"""
        try:
            sample = appsink.emit('pull-sample')
            if not sample:
                return Gst.FlowReturn.ERROR
            
            buffer = sample.get_buffer()
            caps = sample.get_caps()
            
            if not buffer or not caps:
                return Gst.FlowReturn.ERROR
            
            # Map buffer para leitura
            success, map_info = buffer.map(Gst.MapFlags.READ)
            if not success:
                return Gst.FlowReturn.ERROR
            
            try:
                # Obter dimens√µes
                structure = caps.get_structure(0)
                width = structure.get_value("width")
                height = structure.get_value("height")
                
                # Converter para numpy array
                frame = np.ndarray(
                    shape=(height, width, 3),
                    dtype=np.uint8,
                    buffer=map_info.data
                ).copy()
                
                # Adicionar frame na fila interna para WebRTC
                self._add_frame_to_queue(frame)
                
                # Enviar frame para reconhecimento (com skip)
                self.frame_count += 1
                if self.frame_count % self.recognition_frame_skip == 0:
                    self._send_frame_for_recognition(frame)
                
            finally:
                buffer.unmap(map_info)
            
            return Gst.FlowReturn.OK
            
        except Exception as e:
            logger.error(f"Erro no callback de frame: {e}")
            return Gst.FlowReturn.ERROR
    
    def _add_frame_to_queue(self, frame):
        """Adicionar frame na fila interna para WebRTC"""
        # Implementa√ß√£o espec√≠fica para envio WebRTC
        # Frame ser√° enviado via recv() method
        self._current_frame = frame.copy()
        if not self._frame_received:
            self._frame_received = True
            logger.info(f"Primeiro frame recebido para c√¢mera {self.camera_config.get('id')} - {frame.shape}")
    
    def _send_frame_for_recognition(self, frame):
        """Enviar frame para processamento de reconhecimento facial"""
        try:
            if not self.recognition_queue.full():
                # Adicionar metadata do frame
                frame_data = {
                    'camera_id': self.camera_config.get('id'),
                    'timestamp': time.time(),
                    'frame': frame,
                    'frame_id': self.frame_count
                }
                self.recognition_queue.put_nowait(frame_data)
        except Exception as e:
            logger.debug(f"N√£o foi poss√≠vel enviar frame para reconhecimento: {e}")
    
    async def start(self):
        """Iniciar track de v√≠deo"""
        if not self.use_gstreamer:
            # Para tracks de teste, apenas marcar como rodando
            self.is_running = True
            logger.info(f"Test video track iniciado para c√¢mera {self.camera_config.get('id', 'test')}")
            return True
            
        if not self.pipeline:
            logger.error("Pipeline n√£o configurado")
            return False
            
        ret = self.pipeline.set_state(Gst.State.PLAYING)
        if ret == Gst.StateChangeReturn.FAILURE:
            logger.error("Falha ao iniciar pipeline")
            return False
        
        # Aguardar estado PLAYING
        ret = self.pipeline.get_state(timeout=10 * Gst.SECOND)
        if ret[0] != Gst.StateChangeReturn.SUCCESS:
            logger.error(f"Pipeline n√£o conseguiu atingir estado PLAYING: {ret[0]}")
            return False
        
        self.is_running = True
        logger.info(f"Pipeline iniciado para c√¢mera {self.camera_config.get('id')}")
        return True
    
    def stop(self):
        """Parar pipeline GStreamer"""
        self.is_running = False
        if self.pipeline:
            self.pipeline.set_state(Gst.State.NULL)
        logger.info(f"Pipeline parado para c√¢mera {self.camera_config.get('id')}")
    
    async def recv(self):
        """M√©todo requerido pelo aiortc para enviar frames via WebRTC"""
        if not self.is_running:
            raise StopIteration()
            
        pts, time_base = await self.next_timestamp()
        
        try:
            if self.use_gstreamer and self._current_frame is not None:
                # Usar frame do GStreamer (RTSP) se dispon√≠vel
                frame_rgb = self._current_frame.copy()
                if self.frame_count % 150 == 0:  # Log ocasional
                    logger.info(f"üìπ [RTSP] Frame GStreamer #{self.frame_count} - {frame_rgb.shape}")
            else:
                # Usar frame de teste (indica√ß√£o visual de que √© teste)
                frame_rgb = self._generate_test_frame()
                if self.frame_count % 150 == 0:  # Log ocasional
                    camera_type = self.camera_config.get('type', 'unknown')
                    logger.info(f"üìπ [TEST] Frame teste #{self.frame_count} para camera {camera_type}")
            
            # Garantir dimens√µes corretas
            if frame_rgb.shape[0] != self.height or frame_rgb.shape[1] != self.width:
                import cv2
                frame_rgb = cv2.resize(frame_rgb, (self.width, self.height))
            
            # Converter para formato av com YUV420p
            av_frame = av.VideoFrame.from_ndarray(frame_rgb, format="rgb24")
            av_frame = av_frame.reformat(format="yuv420p")
            av_frame.pts = pts
            av_frame.time_base = time_base
            
            # Keyframe a cada 30 frames
            if self.frame_count % 30 == 0:
                av_frame.key_frame = True
                if self.frame_count % 90 == 0:  # Log keyframes ocasionalmente
                    source_type = "RTSP" if (self.use_gstreamer and self._current_frame is not None) else "TEST"
                    logger.info(f"üîë [RTP] Keyframe {source_type} #{self.frame_count}")
            
            self.frame_count += 1
            return av_frame
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao gerar frame: {e}")
            # Fallback para frame de erro vis√≠vel
            error_frame = np.zeros((self.height, self.width, 3), dtype=np.uint8)
            error_frame[:, :] = [255, 0, 0]  # Vermelho para indicar erro
            av_frame = av.VideoFrame.from_ndarray(error_frame, format="rgb24")
            av_frame.pts = pts
            av_frame.time_base = time_base
            return av_frame
    
    def _generate_test_frame(self):
        """Gerar frame de teste que indica claramente que √© um stream de teste"""
        frame = np.zeros((self.height, self.width, 3), dtype=np.uint8)
        
        # Identifica√ß√£o visual de que √© TESTE vs RTSP
        camera_type = self.camera_config.get('type', 'test')
        camera_id = self.camera_config.get('id', 'unknown')
        
        if camera_type == 'test':
            # Fundo azul para teste
            frame[:, :] = [0, 100, 200]
            
            # Faixa horizontal animada
            t = self.frame_count * 0.2
            y_pos = int(self.height/2 + 50 * np.sin(t))
            if 0 <= y_pos < self.height:
                frame[max(0, y_pos-10):min(self.height, y_pos+10), :] = [255, 255, 0]
            
            # Texto "TEST CAMERA" 
            center_y, center_x = self.height // 2, self.width // 2
            frame[center_y-30:center_y+30, center_x-100:center_x+100] = [255, 255, 255]
            
        else:
            # Para casos onde deveria ser RTSP mas n√£o est√° funcionando
            frame[:, :] = [200, 100, 0]  # Laranja
            
            # Indicador de "aguardando RTSP"
            center_y, center_x = self.height // 2, self.width // 2
            frame[center_y-20:center_y+20, center_x-80:center_x+80] = [255, 255, 255]
        
        # Contador visual no canto (pisca a cada segundo)
        color = [0, 255, 0] if (self.frame_count // 30) % 2 else [255, 0, 0]
        frame[10:40, 10:60] = color
        
        # Frame counter textual
        frame[self.height-40:self.height-10, 10:150] = [0, 0, 0]  # Fundo preto
        
        # ID da c√¢mera no topo
        if len(camera_id) > 8:  # Se for UUID
            display_id = camera_id[:8] + "..."
        else:
            display_id = camera_id
        frame[10:30, self.width-120:self.width-10] = [255, 255, 255]  # Fundo branco para ID
        
        return frame


async def monitor_rtp_stats(pc: RTCPeerConnection, session_id: str):
    """Monitorar estat√≠sticas RTP do servidor"""
    try:
        for _ in range(20):  # Monitorar por 20 ciclos (60 segundos)
            await asyncio.sleep(3)
            
            if pc.connectionState != "connected":
                logger.warning(f"üì° [RTP] {session_id}: Conex√£o n√£o est√° mais ativa, parando monitoramento")
                break
                
            try:
                stats = await pc.getStats()
                rtp_sent = 0
                bytes_sent = 0
                
                for stat in stats:
                    if hasattr(stat, 'type') and stat.type == 'outbound-rtp' and hasattr(stat, 'kind') and stat.kind == 'video':
                        rtp_sent = getattr(stat, 'packetsSent', 0)
                        bytes_sent = getattr(stat, 'bytesSent', 0)
                        break
                
                logger.info(f"üì° [RTP] {session_id}: Pacotes enviados: {rtp_sent}, Bytes: {bytes_sent}")
                
                if rtp_sent == 0:
                    logger.error(f"üí• [RTP] {session_id}: PROBLEMA - Nenhum pacote RTP enviado!")
                    
            except Exception as e:
                logger.error(f"‚ùå [RTP] {session_id}: Erro ao obter stats: {e}")
                
        except Exception as e:
            logger.error(f"‚ùå [RTP] Monitor error para {session_id}: {e}")

else:
    # If GStreamer is not available, define a dummy GStreamerVideoTrack 
    # that's actually the FallbackVideoTrack to maintain compatibility
    GStreamerVideoTrack = FallbackVideoTrack

# Type alias for video tracks
VideoTrackType = GStreamerVideoTrack if GSTREAMER_AVAILABLE else FallbackVideoTrack


class WebRTCConnectionManager:
    """Gerenciador de conex√µes WebRTC"""
    
    def __init__(self, recognition_queue: Queue):
        self.recognition_queue = recognition_queue
        self.connections: Dict[str, RTCPeerConnection] = {}
        self.video_tracks: Dict[str, GStreamerVideoTrack] = {}
        self.relay = MediaRelay()
        self._port_patch_applied = False
        
        # Aplicar patch IMEDIATAMENTE na inicializa√ß√£o
        self._apply_immediate_port_patch()
        
    async def create_peer_connection(self, session_id: str, camera_config: Dict[str, Any]) -> RTCPeerConnection:
        """Criar nova conex√£o WebRTC"""
        from aiortc import RTCConfiguration, RTCIceServer
        
        # Configura√ß√£o melhorada para WebRTC local
        import os
        from aiortc import RTCIceServer
        
        # Configura√ß√£o para for√ßar candidatos IPv4 locais
        ice_servers = [
            RTCIceServer(urls="stun:stun.l.google.com:19302")  # Restaurar STUN para gerar candidatos
        ]
        
        # Configurar for√ßadamente o IP p√∫blico para evitar problemas com Docker
        public_ip = os.environ.get('WEBRTC_PUBLIC_IP') or os.environ.get('AIORTC_FORCE_HOST_IP')
        if public_ip:
            logger.info(f"üåç For√ßando IP p√∫blico nos candidatos ICE: {public_ip}")
            os.environ['AIORTC_FORCE_HOST_IP'] = public_ip
        
        # Adicionar TURN server se configurado (para NAT traversal)
        turn_server = os.environ.get('TURN_SERVER_URL')
        turn_username = os.environ.get('TURN_USERNAME')
        turn_password = os.environ.get('TURN_PASSWORD')
        
        if turn_server and turn_username and turn_password:
            ice_servers.append(RTCIceServer(
                urls=turn_server,
                username=turn_username,
                credential=turn_password
            ))
            logger.info(f"üîÑ TURN server configurado: {turn_server}")
        
        # Configurar pol√≠tica de transporte ICE baseada no ambiente
        if os.environ.get('WEBRTC_HOST_NETWORK', 'false').lower() == 'true':
            # Se estamos em Docker com host network, usar relay para garantir que apenas candidatos p√∫blicos s√£o usados
            logger.info(f"üê≥ Configura√ß√£o WebRTC otimizada para Docker network_mode: host")
            # Preferir candidatos srflx em vez de host para evitar IPs Docker internos
            logger.info(f"üîß Configura√ß√£o otimizada para evitar IPs Docker internos")
            
        # Configura√ß√£o compat√≠vel com aiortc (sem par√¢metros n√£o suportados)
        config = RTCConfiguration(iceServers=ice_servers)
        
        logger.info(f"üåê WebRTC configurado para produ√ß√£o: {len(ice_servers)} ICE servers")
        
        # Log da vers√£o do aiortc para debugging
        try:
            import aiortc
            logger.info(f"üì¶ aiortc version: {aiortc.__version__}")
        except:
            logger.warning("‚ö†Ô∏è N√£o foi poss√≠vel obter vers√£o do aiortc")
        
        # Verificar se est√° em host network mode
        host_network = os.getenv('WEBRTC_HOST_NETWORK', 'false').lower() == 'true'
        if host_network:
            logger.info(f"WebRTC em modo host network - candidatos ICE usar√£o localhost")

        # Configura√ß√£o CR√çTICA para for√ßar IPv4 e portas UDP fixas
        fixed_udp_range = os.environ.get('AIORTC_UDP_PORT_RANGE', '40000-40100')
        os.environ['AIORTC_UDP_PORT_RANGE'] = fixed_udp_range
        logger.info(f"üîå Portas UDP FOR√áADAS para: {fixed_udp_range}")
        
        # FOR√áAR IPv4 E PORTAS UDP FIXAS DIRETAMENTE NO SOCKET
        import socket
        
        # Monkey patch para for√ßar apenas IPv4
        original_getaddrinfo = socket.getaddrinfo
        def ipv4_only_getaddrinfo(host, port, family=0, type=0, proto=0, flags=0):
            return original_getaddrinfo(host, port, socket.AF_INET, type, proto, flags)
        socket.getaddrinfo = ipv4_only_getaddrinfo
        
        # PATCH CR√çTICO: For√ßar aiortc a usar apenas portas espec√≠ficas
        self._apply_system_level_port_patch()
        
        # Configurar aiortc para IPv4
        bind_ip = '172.21.15.83'  # IP WSL2 espec√≠fico
        os.environ['AIORTC_HOST'] = bind_ip
        os.environ['AIORTC_FORCE_HOST_IP'] = bind_ip
        
        logger.info(f"üö´ IPv6 desabilitado via monkey patch")
        logger.info(f"üîß For√ßando aiortc bind IP: {bind_ip}")
        logger.info(f"üéØ IP p√∫blico for√ßado: {bind_ip}")

        # Importar RTCPeerConnection com suporte para certificados
        from aiortc import RTCPeerConnection
        import OpenSSL

        # Gerar certificados manualmente para DTLS
        key = OpenSSL.crypto.PKey()
        key.generate_key(OpenSSL.crypto.TYPE_RSA, 2048)

        cert = OpenSSL.crypto.X509()
        cert.get_subject().CN = "presence-webrtc-server"
        cert.gmtime_adj_notBefore(0)
        cert.gmtime_adj_notAfter(365 * 24 * 60 * 60)  # 1 ano de validade
        cert.set_pubkey(key)
        cert.set_serial_number(1000)
        cert.set_issuer(cert.get_subject())
        cert.sign(key, 'sha256')
        
        # Configura√ß√£o melhorada para compatibilidade DTLS
        cert.add_extensions([
            OpenSSL.crypto.X509Extension(
                b'subjectAltName',
                False,
                b'DNS:localhost, IP:127.0.0.1, IP:0.0.0.0'
            ),
            OpenSSL.crypto.X509Extension(
                b'extendedKeyUsage', 
                False, 
                b'serverAuth,clientAuth'
            ),
            OpenSSL.crypto.X509Extension(
                b'keyUsage',
                True,
                b'keyEncipherment,dataEncipherment,digitalSignature'
            )
        ])

        # Converter para o formato esperado pelo aiortc
        try:
            from aiortc import RTCCertificate
            
            # Extrair chave privada e certificado
            key_pem = OpenSSL.crypto.dump_privatekey(OpenSSL.crypto.FILETYPE_PEM, key)
            cert_pem = OpenSSL.crypto.dump_certificate(OpenSSL.crypto.FILETYPE_PEM, cert)
            
            # Para aiortc 1.6.0+, usar RTCCertificate.generateCertificate() ou criar sem par√¢metros
            rtc_certificate = RTCCertificate.generateCertificate()
            logger.info("üîê Certificado DTLS gerado automaticamente para WebRTC")
            
            # Criar RTCPeerConnection com certificado
            pc = RTCPeerConnection(configuration=config)
            # N√£o √© mais necess√°rio passar o certificado manualmente
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao criar certificado personalizado: {e}, usando padr√£o do aiortc")
            # Fallback: criar RTCPeerConnection sem certificado customizado
            pc = RTCPeerConnection(configuration=config)
        logger.info(f"üîê PeerConnection criado para {session_id}")
            
        logger.info(f"üîê WebRTC inicializado com certificado DTLS para {session_id}")
        
        # Monitoramento PROFISSIONAL de candidatos ICE com filtro IPv4
        ice_candidates = []
        
        # Configurar ICE candidate filtering para IPv4 apenas
        def ice_candidate_filter(candidate):
            """Filtrar apenas candidatos IPv4"""
            if hasattr(candidate, 'address') and candidate.address:
                # Bloquear IPv6 (cont√©m ':' m√∫ltiplos)
                if '::' in candidate.address or candidate.address.count(':') > 1:
                    logger.warning(f"üö´ BLOQUEANDO candidate IPv6: {candidate.address}")
                    return False
                # Aceitar apenas IPv4
                logger.info(f"‚úÖ ACEITANDO candidate IPv4: {candidate.address}:{candidate.port}")
                return True
            return False
        
        @pc.on("icecandidate")
        def on_icecandidate(candidate):
            if candidate:
                # Aplicar filtro IPv4 PRIMEIRO
                if '::' in candidate.candidate or candidate.candidate.count(':') > 2:
                    logger.warning(f"üö´ REJEITANDO candidate IPv6: {candidate.candidate[:50]}...")
                    return
                
                ice_candidates.append(candidate.candidate)
                candidate_type = self._analyze_ice_candidate(candidate.candidate)
                logger.info(f"‚úÖ [{session_id}] ICE IPv4 {candidate_type}: {candidate.candidate[:50]}...")
                
                # Filtrar candidatos Docker internos
                if self._is_docker_internal_candidate(candidate.candidate):
                    logger.warning(f"üö´ [{session_id}] Candidato Docker interno filtrado: {candidate.candidate}")
                    # N√£o adicionar candidatos Docker internos √† lista
                    return
            else:
                # An√°lise final dos candidatos
                stats = self._analyze_ice_candidates(ice_candidates)
                logger.info(f"üèÅ [{session_id}] ICE gathering completo: {stats}")
        
        # Configurar range de portas UDP FIXO para produ√ß√£o
        udp_port_range = os.environ.get('AIORTC_UDP_PORT_RANGE', '40000-40100')
        webrtc_port_range = os.environ.get('WEBRTC_UDP_PORT_RANGE', '40000-40100')
        
        # For√ßar range consistente
        os.environ['AIORTC_UDP_PORT_RANGE'] = udp_port_range
        os.environ['WEBRTC_UDP_PORT_RANGE'] = webrtc_port_range
        
        # Ativar modo strict para garantir que apenas essas portas sejam usadas
        if os.environ.get('AIORTC_STRICT_PORT_RANGE', 'false').lower() == 'true':
            logger.info(f"üîí Modo STRICT ativado - apenas portas {udp_port_range} ser√£o usadas")
        
        logger.info(f"üîå Range de portas UDP FIXO configurado: {udp_port_range}")
        
        # Configurar IP p√∫blico se definido
        public_ip = os.environ.get('WEBRTC_PUBLIC_IP')
        if public_ip:
            os.environ['AIORTC_FORCE_HOST_IP'] = public_ip
            logger.info(f"üåç IP p√∫blico configurado: {public_ip}")
        
        # Salvar refer√™ncia da conex√£o
        self.connections[session_id] = pc
        
        # Configurar handlers PROFISSIONAIS com monitoramento avan√ßado
        @pc.on("connectionstatechange")
        async def on_connectionstatechange():
            state = pc.connectionState
            logger.info(f"üîó Connection state para {session_id}: {state}")
            
            if state == "connected":
                # Log detalhado da conex√£o estabelecida (compat√≠vel com vers√µes antigas)
                try:
                    # Tentar usar m√©todos novos do aiortc
                    senders = pc.getSenders()
                    receivers = pc.getReceivers()
                    logger.info(f"   ‚úÖ CONECTADO! Senders: {len(senders)} | Receivers: {len(receivers)}")
                    
                    # Log das capacidades negociadas
                    for i, sender in enumerate(senders):
                        if sender and hasattr(sender, 'track') and sender.track:
                            track_info = f"{sender.track.kind} (ID: {getattr(sender.track, 'id', 'unknown')[:8]})"
                            logger.info(f"      üì° [RTP] Sender {i}: {track_info}")
                            
                except AttributeError:
                    # Fallback para vers√µes antigas do aiortc
                    try:
                        transceivers = pc.getTransceivers()
                        senders = [t.sender for t in transceivers if t.sender]
                        receivers = [t.receiver for t in transceivers if t.receiver]
                        logger.info(f"   ‚úÖ CONECTADO! Senders: {len(senders)} | Receivers: {len(receivers)} (legacy)")
                    except:
                        logger.info(f"   ‚úÖ CONECTADO! (vers√£o simplificada - n√£o foi poss√≠vel obter detalhes)")
                
                # Iniciar monitoramento de qualidade
                asyncio.create_task(self._monitor_connection_quality(pc, session_id))
                        
            elif state == "connecting":
                logger.info(f"   üîÑ Estabelecendo conex√£o WebRTC...")
                
            elif state == "failed":
                logger.error(f"   ‚ùå FALHA na conex√£o para {session_id}")
                await self._handle_connection_failure(session_id)
                
            elif state == "disconnected":
                logger.warning(f"   ‚ö†Ô∏è Conex√£o desconectada para {session_id}")
                
            elif state == "closed":
                logger.info(f"   üö™ Conex√£o fechada para {session_id}")
                await self.cleanup_connection(session_id)
        
        @pc.on("iceconnectionstatechange")
        async def on_iceconnectionstatechange():
            state = pc.iceConnectionState
            logger.info(f"üßä ICE connection state para {session_id}: {state}")
            if state == "failed":
                logger.error(f"‚ùå ICE connection failed para {session_id}")
            elif state == "connected":
                logger.info(f"‚úÖ ICE connection established para {session_id}")
            elif state == "disconnected":
                logger.warning(f"‚ö†Ô∏è ICE connection disconnected para {session_id}")
        
        @pc.on("icegatheringstatechange")
        async def on_icegatheringstatechange():
            state = pc.iceGatheringState
            logger.info(f"üîç ICE gathering state para {session_id}: {state}")
        
        @pc.on("icecandidate")
        async def on_icecandidate(candidate):
            if candidate:
                logger.info(f"üéØ ICE candidate para {session_id}: {candidate.candidate}")
            else:
                logger.info(f"‚úÖ ICE gathering complete para {session_id}")
        
        @pc.on("track")
        async def on_track(track):
            logger.info(f"üìπ Track received for {session_id}: {track.kind}")
        
        @pc.on("datachannel")
        async def on_datachannel(channel):
            logger.info(f"üì° Data channel opened for {session_id}: {channel.label}")
        
        logger.info(f"üöÄ Conex√£o WebRTC PROFISSIONAL criada: {session_id}")
        return pc
    
    def _apply_system_level_port_patch(self):
        """Aplicar patch AGRESSIVO no sistema para for√ßar uso de portas espec√≠ficas"""
        if self._port_patch_applied:
            return
        
        import os
        import socket
        import threading
        from threading import Lock
        
        # Obter range de portas configurado
        udp_range = os.environ.get('AIORTC_UDP_PORT_RANGE', '40000-40100')
        min_port, max_port = map(int, udp_range.split('-'))
        
        logger.info(f"üîß Aplicando patch AGRESSIVO de portas UDP: {udp_range}")
        
        # Pool de portas dispon√≠veis com thread-safety
        available_ports = list(range(min_port, max_port + 1))
        port_lock = Lock()
        used_ports = set()
        
        def get_next_port():
            """Obter pr√≥xima porta dispon√≠vel do pool"""
            with port_lock:
                for port in available_ports:
                    if port not in used_ports:
                        used_ports.add(port)
                        return port
                # Se todas est√£o em uso, reciclar
                used_ports.clear()
                used_ports.add(min_port)
                return min_port
        
        def release_port(port):
            """Liberar porta de volta ao pool"""
            with port_lock:
                used_ports.discard(port)
        
        try:
            # PATCH N√çVEL 1: Interceptar socket.socket
            original_socket = socket.socket
            
            def aggressive_socket_patch(family=socket.AF_INET, type=socket.SOCK_DGRAM, proto=0, fileno=None):
                sock = original_socket(family, type, proto, fileno)
                
                if type == socket.SOCK_DGRAM and family == socket.AF_INET:
                    original_bind = sock.bind
                    original_close = sock.close
                    bound_port = None
                    
                    def forced_bind(address):
                        nonlocal bound_port
                        host, port = address
                        
                        # SEMPRE for√ßar porta do nosso range
                        if port == 0 or not (min_port <= port <= max_port):
                            forced_port = get_next_port()
                            try:
                                result = original_bind((host, forced_port))
                                bound_port = forced_port
                                logger.info(f"üéØ FOR√áADO: Socket UDP {host}:{forced_port}")
                                return result
                            except OSError as e:
                                logger.warning(f"‚ö†Ô∏è Falha ao bind {forced_port}: {e}")
                                # Tentar pr√≥xima porta
                                for try_port in range(min_port, max_port + 1):
                                    try:
                                        result = original_bind((host, try_port))
                                        bound_port = try_port
                                        logger.info(f"üéØ RETRY: Socket UDP {host}:{try_port}")
                                        return result
                                    except OSError:
                                        continue
                                raise OSError(f"Nenhuma porta UDP dispon√≠vel no range {udp_range}")
                        else:
                            bound_port = port
                            return original_bind(address)
                    
                    def tracked_close():
                        if bound_port:
                            release_port(bound_port)
                        return original_close()
                    
                    sock.bind = forced_bind
                    sock.close = tracked_close
                
                return sock
            
            socket.socket = aggressive_socket_patch
            logger.info("‚úÖ Patch AGRESSIVO de socket aplicado")
            
            # PATCH N√çVEL 2: Interceptar imports do aiortc
            import sys
            from types import ModuleType
            
            class PortControlledModule(ModuleType):
                """M√≥dulo wrapper que intercepta cria√ß√£o de transports"""
                def __init__(self, original_module):
                    self._original = original_module
                    self.__dict__.update(original_module.__dict__)
                
                def __getattr__(self, name):
                    attr = getattr(self._original, name)
                    
                    # Interceptar classes que criam sockets UDP
                    if name in ['RTCIceTransport', 'RTCDtlsTransport']:
                        logger.info(f"üîç Interceptando {name}")
                        
                        class WrappedTransport(attr):
                            def __init__(self, *args, **kwargs):
                                # For√ßar configura√ß√µes espec√≠ficas antes de inicializar
                                os.environ['AIORTC_UDP_PORT_RANGE'] = udp_range
                                super().__init__(*args, **kwargs)
                        
                        return WrappedTransport
                    
                    return attr
            
            # Interceptar m√≥dulos relevantes do aiortc
            modules_to_patch = [
                'aiortc.rtcicetransport',
                'aiortc.rtcdtlstransport',
                'aiortc'
            ]
            
            for module_name in modules_to_patch:
                if module_name in sys.modules:
                    original_module = sys.modules[module_name]
                    sys.modules[module_name] = PortControlledModule(original_module)
                    logger.info(f"‚úÖ M√≥dulo {module_name} interceptado")
            
            # PATCH N√çVEL 3: Vari√°veis de ambiente CR√çTICAS
            os.environ.update({
                'AIORTC_UDP_PORT_RANGE': udp_range,
                'WEBRTC_UDP_PORT_RANGE': udp_range,
                'AIORTC_STRICT_PORT_RANGE': 'true',
                'AIORTC_FORCE_PORT_RANGE': 'true',
                'AIORTC_BIND_PORT_MIN': str(min_port),
                'AIORTC_BIND_PORT_MAX': str(max_port)
            })
            
            logger.info("üöÄ Patch AGRESSIVO COMPLETO aplicado com sucesso!")
            logger.info(f"üéØ TODAS as portas UDP ser√£o FOR√áADAS para range {udp_range}")
            
            self._port_patch_applied = True
            
        except Exception as e:
            logger.error(f"üí• ERRO CR√çTICO no patch agressivo: {e}")
            import traceback
            logger.error(f"Traceback: {traceback.format_exc()}")
            logger.warning("‚ö†Ô∏è Sistema pode usar portas aleat√≥rias")
    
    def _apply_immediate_port_patch(self):
        """Aplicar patch IMEDIATO de portas UDP antes de qualquer uso do aiortc"""
        import os
        import socket
        
        udp_range = os.environ.get('AIORTC_UDP_PORT_RANGE', '40000-40100')
        min_port, max_port = map(int, udp_range.split('-'))
        
        logger.info(f"[PATCH] INTERCEPTANDO TODOS os sockets UDP para range {udp_range}")
        
        # Salvar fun√ß√£o original antes de qualquer import do aiortc
        if not hasattr(socket, '_original_socket_backup'):
            socket._original_socket_backup = socket.socket
            
            def ultimate_socket_override(family=socket.AF_INET, type=socket.SOCK_DGRAM, proto=0, fileno=None):
                sock = socket._original_socket_backup(family, type, proto, fileno)
                
                # Interceptar APENAS sockets UDP IPv4
                if family == socket.AF_INET and type == socket.SOCK_DGRAM:
                    original_bind = sock.bind
                    
                    def ultimate_bind_override(address):
                        host, port = address
                        
                        # SEMPRE usar nosso range, independente do que foi solicitado
                        if port == 0:
                            # Porta autom√°tica - escolher do nosso range
                            for test_port in range(min_port, max_port + 1):
                                try:
                                    result = original_bind((host, test_port))
                                    logger.info(f"üéØ UDP INTERCEPTADO: {host}:{test_port} (era auto)")
                                    return result
                                except OSError:
                                    continue
                            # Se nenhuma funcionou, tentar original
                            logger.warning(f"‚ö†Ô∏è Range {udp_range} esgotado, usando porta autom√°tica")
                            return original_bind(address)
                        else:
                            # Porta espec√≠fica - verificar se est√° no range
                            if min_port <= port <= max_port:
                                logger.info(f"‚úÖ UDP PERMITIDO: {host}:{port}")
                                return original_bind(address)
                            else:
                                # For√ßar para nosso range
                                forced_port = min_port
                                logger.info(f"üö´ UDP REJEITADO: {host}:{port} ‚Üí FOR√áADO para {host}:{forced_port}")
                                return original_bind((host, forced_port))
                    
                    sock.bind = ultimate_bind_override
                
                return sock
            
            # Aplicar o override GLOBALMENTE
            socket.socket = ultimate_socket_override
            logger.info("[PATCH] ULTIMATE aplicado - TODOS os sockets UDP serao interceptados!")
        else:
            logger.info("‚ö†Ô∏è Patch ultimate j√° estava aplicado")
    
    def _analyze_ice_candidate(self, candidate_str: str) -> str:
        """Analisar tipo de candidato ICE"""
        if "typ host" in candidate_str:
            if "127.0.0.1" in candidate_str or "::1" in candidate_str:
                return "HOST-LOCAL"
            # Ignorar candidatos Docker internos
            elif any(docker_ip in candidate_str for docker_ip in ["172.17.", "172.18.", "172.19.", "192.168.65."]):
                logger.warning(f"üö´ Ignorando candidato Docker interno: {candidate_str[:50]}...")
                return "HOST-DOCKER-IGNORED"
            else:
                return "HOST-LAN"
        elif "typ srflx" in candidate_str:
            # Priorizar candidatos SRFLX para facilitar conex√µes NAT
            return "SRFLX-NAT"
        elif "typ relay" in candidate_str:
            return "RELAY-TURN"
        elif "typ prflx" in candidate_str:
            return "PRFLX-PEER"
        else:
            return "UNKNOWN"
    
    def _analyze_ice_candidates(self, candidates: list) -> str:
        """Analisar estat√≠sticas dos candidatos ICE"""
        stats = {
            "host": 0,
            "host_docker": 0,
            "srflx": 0, 
            "relay": 0,
            "total": len(candidates)
        }
        
        for candidate in candidates:
            if "typ host" in candidate:
                if self._is_docker_internal_candidate(candidate):
                    stats["host_docker"] += 1
                else:
                    stats["host"] += 1
            elif "typ srflx" in candidate:
                stats["srflx"] += 1
            elif "typ relay" in candidate:
                stats["relay"] += 1
        
        return f"HOST:{stats['host']} HOST_DOCKER:{stats['host_docker']} SRFLX:{stats['srflx']} RELAY:{stats['relay']} TOTAL:{stats['total']}"
    
    def _filter_sdp_candidates(self, sdp: str) -> str:
        """Filter out Docker internal IP candidates from SDP"""
        lines = sdp.split('\n')
        filtered_lines = []
        filtered_count = 0
        
        for line in lines:
            # Check if this is an ICE candidate line
            if line.startswith('a=candidate:'):
                # Check if this candidate contains Docker internal IPs
                if not self._is_docker_internal_candidate(line):
                    filtered_lines.append(line)
                else:
                    logger.info(f"üö´ Filtered Docker internal candidate: {line[:50]}...")
                    filtered_count += 1
            else:
                filtered_lines.append(line)
        
        if filtered_count > 0:
            logger.info(f"üîç Filtered {filtered_count} Docker internal candidates from SDP")
        
        return '\n'.join(filtered_lines)
    
    def _is_docker_internal_candidate(self, candidate_str: str) -> bool:
        """Verificar se o candidato ICE √© um IP Docker interno"""
        # IMPORTANTE: WSL IP (172.21.15.83) N√ÉO √© Docker interno - √© o IP v√°lido do WSL
        # Apenas bloquear IPs realmente internos do Docker
        docker_ips = [
            "172.17.", "172.18.", "172.19.", "172.20.",
            # 172.21. removido para permitir WSL
            "172.22.", "172.23.", "172.24.", "172.25.", "172.26.", "172.27.", "172.28.", "172.29.", "172.30.", "172.31.",
            "192.168.65.", "192.168.66.", "192.168.67.", "192.168.68.", "192.168.69.",
            "10.0.0.", "10.0.1.", "10.0.2.", "10.0.3.", "10.0.4.", "10.0.5.", "10.0.6.", "10.0.7.", "10.0.8.", "10.0.9.",
            "169.254.",  # Link-local
            "fe80:",     # IPv6 link-local
        ]
        
        # Especificamente permitir o IP do WSL
        if "172.21.15.83" in candidate_str:
            return False
            
        for docker_ip in docker_ips:
            if docker_ip in candidate_str:
                return True
        return False
    
    async def _monitor_connection_quality(self, pc: RTCPeerConnection, session_id: str):
        """Monitorar qualidade da conex√£o WebRTC (compat√≠vel com vers√µes antigas)"""
        try:
            # Verificar se getStats est√° dispon√≠vel
            if not hasattr(pc, 'getStats'):
                logger.warning(f"‚ö†Ô∏è [{session_id}] getStats() n√£o dispon√≠vel nesta vers√£o do aiortc")
                return
            
            for i in range(60):  # Monitor por 5 minutos
                await asyncio.sleep(5)
                
                if pc.connectionState != "connected":
                    break
                
                try:
                    # Obter estat√≠sticas com tratamento de erro
                    stats = await pc.getStats()
                    if not stats:
                        continue
                    
                    rtp_stats = {"packets_sent": 0, "bytes_sent": 0, "packets_lost": 0}
                    ice_stats = {"bytes_sent": 0, "bytes_received": 0}
                    
                    for stat in stats:
                        if not hasattr(stat, 'type'):
                            continue
                        
                        stat_type = getattr(stat, 'type', '')
                        
                        # RTP statistics (with multiple property name attempts)
                        if stat_type == 'outbound-rtp' and getattr(stat, 'kind', '') == 'video':
                            rtp_stats["packets_sent"] = self._get_stat_value(stat, ['packetsSent', 'packets_sent'])
                            rtp_stats["bytes_sent"] = self._get_stat_value(stat, ['bytesSent', 'bytes_sent'])
                            rtp_stats["packets_lost"] = self._get_stat_value(stat, ['packetsLost', 'packets_lost'])
                        
                        # ICE statistics
                        elif stat_type == 'candidate-pair' and getattr(stat, 'state', '') == 'succeeded':
                            ice_stats["bytes_sent"] = self._get_stat_value(stat, ['bytesSent', 'bytes_sent'])
                            ice_stats["bytes_received"] = self._get_stat_value(stat, ['bytesReceived', 'bytes_received'])
                    
                    # Log estat√≠sticas a cada 30 segundos
                    if i % 6 == 0:
                        logger.info(f"üìä [{session_id}] RTP: {rtp_stats['packets_sent']} pkts | "
                                  f"{rtp_stats['bytes_sent']} bytes | {rtp_stats['packets_lost']} lost")
                        
                except Exception as stats_error:
                    logger.debug(f"‚ö†Ô∏è [{session_id}] Erro ao obter stats: {stats_error}")
                    continue
                    
        except Exception as e:
            logger.error(f"‚ùå Erro no monitoramento de qualidade para {session_id}: {e}")
    
    def _get_stat_value(self, stat, property_names, default=0):
        """Obter valor de estat√≠stica com m√∫ltiplas tentativas de nome de propriedade"""
        for prop_name in property_names:
            if hasattr(stat, prop_name):
                return getattr(stat, prop_name, default)
        return default
    
    async def _handle_connection_failure(self, session_id: str):
        """Lidar com falha de conex√£o"""
        logger.error(f"[ERROR] Tratando falha de conexao para {session_id}")
        
        # Tentar limpeza e eventual reconex√£o
        try:
            await self.cleanup_connection(session_id)
        except Exception as e:
            logger.error(f"‚ùå Erro durante limpeza de conex√£o falhada: {e}")
    
    async def cleanup_connection(self, session_id: str):
        """Limpar conex√£o WebRTC"""
        if session_id in self.video_tracks:
            self.video_tracks[session_id].stop()
            del self.video_tracks[session_id]
        
        if session_id in self.connections:
            await self.connections[session_id].close()
            del self.connections[session_id]
        
        logger.info(f"Conex√£o WebRTC limpa: {session_id}")
    
    async def cleanup_all(self):
        """Limpar todas as conex√µes"""
        session_ids = list(self.connections.keys())
        for session_id in session_ids:
            await self.cleanup_connection(session_id)


class WebRTCServer:
    """Servidor WebRTC principal"""
    
    def __init__(self, host: str = "0.0.0.0", port: int = None):
        self.host = host
        # Usar vari√°vel de ambiente WEBRTC_PORT se dispon√≠vel
        import os
        self.port = port or int(os.environ.get("WEBRTC_PORT", 8080))
        self.app = web.Application()
        self.recognition_queue = Queue(maxsize=10)
        self.connection_manager = WebRTCConnectionManager(self.recognition_queue)
        
        # Socket.IO para comunica√ß√£o com recognition worker - usando namespace espec√≠fico
        self.sio = socketio.AsyncServer(cors_allowed_origins="*", async_mode='aiohttp', namespaces=['/rtc'])
        
        # Configurar rotas
        self._setup_routes()
        self._setup_cors()
        
        # Configurar socketio de forma segura
        self.sio.attach(self.app, socketio_path='socket')
        
        # Configurar socketio handlers
        self._setup_socketio()
        
        logger.info(f"üöÄ WebRTC Server PROFISSIONAL inicializado em {host}:{port}")
    
    def _setup_detailed_logging(self):
        """Configurar logging detalhado para debugging"""
        try:
            # Configurar logging espec√≠fico para aiortc
            aiortc_logger = logging.getLogger('aiortc')
            aiortc_logger.setLevel(logging.INFO)
            
            # Configurar logging para GStreamer
            gst_logger = logging.getLogger('gi.repository.Gst')
            gst_logger.setLevel(logging.WARNING)
            
            # Configurar logging para ICE
            ice_logger = logging.getLogger('aiortc.rtcicetransport')
            ice_logger.setLevel(logging.INFO)
            
            # Configurar logging para DTLS
            dtls_logger = logging.getLogger('aiortc.rtcdtlstransport')
            dtls_logger.setLevel(logging.INFO)
            
            # Log de configura√ß√£o
            logger.info("üîç Logging detalhado configurado para debugging")
            logger.info("üìä Componentes monitorados: aiortc, GStreamer, ICE, DTLS")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao configurar logging detalhado: {e}")
    
    def _setup_routes(self):
        """Configurar rotas HTTP"""
        self.app.router.add_post("/offer", self.handle_offer)
        self.app.router.add_get("/health", self.health_check)
        self.app.router.add_get("/status", self.get_status)
        self.app.router.add_get("/test", self.test_endpoint)
    
    def _setup_cors(self):
        """Configurar CORS ULTRA SIMPLES"""
        from aiohttp.web import middleware
        
        @middleware
        async def simple_cors_middleware(request, handler):
            # Log da requisi√ß√£o para debug
            logger.info(f"üåê CORS: {request.method} {request.path}")
            
            # Se for OPTIONS, responder diretamente
            if request.method == "OPTIONS":
                response = web.Response(status=200)
                response.headers['Access-Control-Allow-Origin'] = '*'
                response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
                response.headers['Access-Control-Allow-Headers'] = '*'
                response.headers['Access-Control-Max-Age'] = '86400'
                return response
            else:
                try:
                    response = await handler(request)
                except Exception as e:
                    logger.error(f"üí• Handler error: {e}")
                    response = web.json_response({"error": f"Handler failed: {str(e)}"}, status=500)
            
            # Headers CORS para todas as respostas
            response.headers['Access-Control-Allow-Origin'] = '*'
            response.headers['Access-Control-Allow-Methods'] = 'GET, POST, PUT, DELETE, OPTIONS'
            response.headers['Access-Control-Allow-Headers'] = 'Content-Type, Authorization, X-Requested-With'
            
            return response
        
        # Adicionar middleware
        self.app.middlewares.append(simple_cors_middleware)
    
    def _setup_socketio(self):
        """Configurar Socket.IO"""
        @self.sio.event(namespace='/rtc')
        async def connect(sid, environ):
            logger.info(f"Cliente Socket.IO conectado: {sid}")
        
        @self.sio.event(namespace='/rtc')
        async def disconnect(sid):
            logger.info(f"Cliente Socket.IO desconectado: {sid}")
        
        @self.sio.event(namespace='/rtc')
        async def recognition_result(sid, data):
            """Receber resultado de reconhecimento do recognition worker"""
            logger.info(f"Resultado de reconhecimento recebido: {data}")
            # Broadcast para clientes WebSocket se necess√°rio
        
    async def handle_offer(self, request):
        """Handle WebRTC offer"""
        request_id = str(uuid.uuid4())[:8]
        
        try:
            # Parse JSON data
            data = await request.json()
            logger.info(f"üîç DEBUG: Incoming offer data keys: {list(data.keys())}")
            
            offer_sdp = data.get("sdp")
            offer_type = data.get("type")
            session_id = data.get("session_id", "video")
            
            logger.info(f"üîç DEBUG: Session ID: {session_id}")
            if 'camera' in data:
                logger.info(f"üîç DEBUG: Camera data: {data['camera']}")
            else:
                logger.info(f"üîç DEBUG: No camera field in data")
            
            if not offer_sdp or not offer_type:
                return web.json_response({"error": "SDP e type s√£o obrigat√≥rios"}, status=400)
            
            logger.info(f"‚úÖ Criando conex√£o WebRTC: {session_id}")
            
            # Criar PeerConnection
            pc = await self.connection_manager.create_peer_connection(session_id, {})
            
            # Extrair camera_id do campo camera na requisi√ß√£o ou do session_id
            try:
                logger.info(f"üîç DEBUG: Starting camera config processing")
                camera_data = data.get("camera")
                camera_id = None
                camera_config = {'type': 'test', 'id': session_id}
                logger.info(f"üîç DEBUG: Initial camera_config created: {camera_config}")
            except Exception as e:
                logger.error(f"üîç DEBUG: Error in initial camera config setup: {e}")
                logger.error(f"üîç DEBUG: Error type: {type(e)}")
                import traceback
                logger.error(f"üîç DEBUG: Traceback: {traceback.format_exc()}")
                raise
            
            if camera_data and isinstance(camera_data, dict):
                # Camera data enviado diretamente pelo frontend
                camera_id = camera_data.get('id')
                logger.info(f"üéØ Camera data recebido: {camera_data.get('name', 'Unknown')} (ID: {camera_id})")
                
                # Usar os dados da c√¢mera recebidos
                camera_config = {
                    'id': camera_id,
                    'name': camera_data.get('name', 'Camera'),
                    'url': camera_data.get('url', ''),
                    'type': 'rtsp' if camera_data.get('url', '').startswith('rtsp://') else 'test',
                    'rtsp_url': camera_data.get('url') if camera_data.get('url', '').startswith('rtsp://') else None,
                    'resolution_width': camera_data.get('resolution_width'),
                    'resolution_height': camera_data.get('resolution_height'),
                    'fps_limit': camera_data.get('fps_limit', 25)
                }
                logger.info(f"üìπ Camera config criada: {camera_config.get('name')} - {camera_config.get('type')}")
                logger.info(f"üîó URL: {camera_config.get('url', 'N/A')}")
                
            elif session_id.startswith("camera_"):
                # Formato legado: camera_<uuid>_<timestamp>
                parts = session_id.split("_")
                if len(parts) >= 2:
                    camera_id = parts[1]  # UUID da c√¢mera
                    logger.info(f"üéØ Extraindo camera_id: {camera_id}")
                    
                    # Buscar configura√ß√£o da c√¢mera
                    try:
                        camera_config = await self._get_camera_config(camera_id)
                        if camera_config:
                            logger.info(f"üìπ Camera config encontrada: {camera_config.get('name', 'Unknown')}")
                            logger.info(f"üîó RTSP URL: {camera_config.get('rtsp_url', 'N/A')}")
                        else:
                            logger.warning(f"‚ö†Ô∏è Camera config n√£o encontrada para {camera_id}, usando teste")
                            camera_config = {'type': 'test', 'id': camera_id, 'url': 'test://source'}
                    except Exception as e:
                        logger.error(f"‚ùå Erro ao buscar camera config: {e}")
                        camera_config = {'type': 'test', 'id': camera_id, 'url': 'test://source'}
            
            # Criar track de v√≠deo ANTES de processar o offer
            logger.info(f"üìπ Criando track de v√≠deo para {camera_config.get('type', 'test')}")
            
            # TEMPOR√ÅRIO: Usar sempre TestVideoTrack para garantir estabilidade
            logger.info(f"üß™ MODO DEBUG: Usando TestVideoTrack para garantir estabilidade")
            video_track = self._create_test_video_track()
            logger.info(f"üìπ TestVideoTrack criado")
            
            # Adicionar track ao PeerConnection
            pc.addTrack(video_track)
            
            # Salvar refer√™ncia do track
            self.connection_manager.video_tracks[session_id] = video_track
            logger.info(f"‚úÖ Video track adicionado ao PeerConnection")
            
            # Processar offer recebido DEPOIS de adicionar o track
            offer = RTCSessionDescription(sdp=offer_sdp, type=offer_type)
            await pc.setRemoteDescription(offer)
            logger.info(f"üì® Offer processado para {session_id}")
            
            # Criar answer
            answer = await pc.createAnswer()
            await pc.setLocalDescription(answer)
            logger.info(f"üì© Answer criado")
            
            # Aguardar ICE gathering
            for _ in range(10):  # At√© 1 segundo
                if pc.iceGatheringState == "complete":
                    break
                await asyncio.sleep(0.1)
            
            logger.info(f"ICE gathering: {pc.iceGatheringState}")
            
            # Preparar resposta com SDP filtrado (remover candidatos Docker internos)
            filtered_sdp = self.connection_manager._filter_sdp_candidates(pc.localDescription.sdp)
            response_data = {
                "sdp": filtered_sdp,
                "type": pc.localDescription.type,
                "session_id": session_id
            }
            
            logger.info(f"Answer SDP original: {pc.localDescription.sdp.count('a=candidate')} candidatos ICE")
            logger.info(f"Answer SDP filtrado: {filtered_sdp.count('a=candidate')} candidatos ICE")
            
            return web.json_response(response_data)
            
        except Exception as e:
            logger.error(f"üí• Erro ao processar offer: {e}")
            return web.json_response({"error": str(e)}, status=500)
    
    async def health_check(self, request):
        """Health check endpoint"""
        return web.json_response({
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "gstreamer_available": GSTREAMER_AVAILABLE,
            "active_connections": len(self.connection_manager.connections)
        })
    
    async def get_status(self, request):
        """Status endpoint"""
        return web.json_response({
            "active_connections": len(self.connection_manager.connections),
            "video_tracks": len(self.connection_manager.video_tracks),
            "recognition_queue_size": self.recognition_queue.qsize() if hasattr(self.recognition_queue, 'qsize') else 0,
            "gstreamer_available": GSTREAMER_AVAILABLE
        })
    
    async def test_endpoint(self, request):
        """Test endpoint to verify WebRTC server is running"""
        logger.info("üß™ Test endpoint acessado!")
        return web.json_response({
            "message": "WebRTC Server est√° funcionando!",
            "timestamp": datetime.now().isoformat(),
            "server_info": {
                "gstreamer_available": GSTREAMER_AVAILABLE,
                "active_connections": len(self.connection_manager.connections),
                "python_version": str(sys.version),
                "working_dir": str(os.getcwd()) if hasattr(os, 'getcwd') else "unknown"
            }
        })
    
    async def start_recognition_worker_process(self):
        """Iniciar processo de reconhecimento facial"""
        from app.webrtc_worker.recognition_worker import start_recognition_worker
        
        try:
            # Iniciar worker em processo separado
            recognition_process = Process(
                target=start_recognition_worker,
                args=(self.recognition_queue,)
            )
            recognition_process.daemon = True
            recognition_process.start()
            
            logger.info("Processo de reconhecimento facial iniciado")
            return recognition_process
            
        except Exception as e:
            logger.error(f"Erro ao iniciar processo de reconhecimento: {e}")
            return None
    
    async def _get_camera_config(self, camera_id: str):
        """Buscar configura√ß√£o da c√¢mera no banco de dados via API"""
        try:
            api_url = os.environ.get('API_BASE_URL', 'http://localhost:9000')
            url = f"{api_url}/api/v1/cameras/{camera_id}"
            logger.info(f"üîç Buscando config da c√¢mera em: {url}")
            
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=5)) as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        camera_data = await response.json()
                        logger.info(f"‚úÖ Camera data recebido: {list(camera_data.keys())}")
                        
                        # Tentar diferentes formatos de resposta da API
                        camera_config = None
                        if 'camera' in camera_data:
                            camera_config = camera_data['camera']
                        elif 'data' in camera_data:
                            camera_config = camera_data['data']
                        else:
                            # Se a resposta √© diretamente a config da c√¢mera
                            camera_config = camera_data
                        
                        if camera_config and 'id' in camera_config:
                            logger.info(f"‚úÖ Config da c√¢mera encontrada: {camera_config.get('name', 'Unknown')}")
                            return camera_config
                        else:
                            logger.warning(f"‚ö†Ô∏è Formato de resposta inesperado: {camera_data}")
                            return None
                    elif response.status == 404:
                        logger.warning(f"‚ö†Ô∏è C√¢mera {camera_id} n√£o encontrada (404)")
                        return None
                    else:
                        logger.error(f"‚ùå Erro HTTP ao buscar c√¢mera {camera_id}: {response.status}")
                        response_text = await response.text()
                        logger.error(f"Response: {response_text[:200]}...")
                        return None
        except asyncio.TimeoutError:
            logger.error(f"‚è∞ Timeout ao conectar com API para c√¢mera {camera_id}")
            return None
        except Exception as e:
            logger.error(f"‚ùå Erro ao conectar com API para c√¢mera {camera_id}: {e}")
            return None
    
    async def _create_rtsp_video_track(self, camera_config: Dict[str, Any], session_id: str):
        """Criar video track RTSP usando MediaPlayer do aiortc (recomenda√ß√£o WebRTC)"""
        try:
            from aiortc.contrib.media import MediaPlayer
            camera_url = camera_config.get('url', '')
            
            logger.info(f"üé• Criando MediaPlayer WebRTC para {camera_url}")
            
            # Pipeline GStreamer otimizado para WebRTC (seguindo recomenda√ß√µes)
            gst_pipeline = (
                f"rtspsrc location={camera_url} latency=100 ! "
                f"rtph264depay ! h264parse ! avdec_h264 ! videoconvert ! videoscale ! "
                f"video/x-raw,width=640,height=480 ! queue ! x264enc tune=zerolatency bitrate=512 speed-preset=ultrafast ! "
                f"rtph264pay config-interval=1 pt=96 name=pay0"
            )
            
            # Criar MediaPlayer com pipeline otimizado
            player = MediaPlayer(gst_pipeline, format="gst")
            
            if player and player.video:
                logger.info(f"‚úÖ MediaPlayer WebRTC criado com sucesso para {session_id}")
                logger.info(f"üéØ Pipeline: {gst_pipeline}")
                return player.video
            else:
                logger.warning(f"‚ö†Ô∏è MediaPlayer falhou, usando fallback de teste")
                return self._create_test_video_track()
                
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar MediaPlayer RTSP: {e}")
            logger.error(f"üîÑ Usando fallback de teste para {session_id}")
            return self._create_test_video_track()
    
    def _create_test_video_track(self):
        """Criar video track de teste funcional - VERS√ÉO SIMPLIFICADA PARA DEBUG"""
        logger.info(f"üß™ CRIANDO TEST VIDEO TRACK SIMPLIFICADO")
        
        # Vers√£o simplificada sem MediaPlayer para debug
        class TestVideoTrack(MediaStreamTrack):
            kind = "video"
            def __init__(self):
                super().__init__()
                self.counter = 0
            
            async def start(self):
                """Start method for compatibility with GStreamerVideoTrack"""
                return True  # Test tracks are always ready
            
            async def recv(self):
                # Log para verificar se est√° enviando frames
                if self.counter % 30 == 0:  # Log a cada 30 frames para n√£o sobrecarregar
                    print(f"üåÄ TEST TRACK: Enviando frame {self.counter}")
                    logger.info(f"üåÄ TEST TRACK: Frame {self.counter} sendo enviado via WebRTC")
                
                pts, time_base = await self.next_timestamp()
                
                # Criar frame colorido animado MAIS VIS√çVEL
                import numpy as np
                width, height = 640, 480
                
                # Frame com gradiente colorido que muda
                frame_data = np.zeros((height, width, 3), dtype=np.uint8)
                
                # Fundo gradiente animado
                for y in range(height):
                    for x in range(width):
                        r = int((x / width) * 255)
                        g = int((y / height) * 255) 
                        b = int(((x + y + self.counter * 2) % 256))
                        frame_data[y, x] = [r, g, b]
                
                # C√≠rculo central animado GRANDE
                center_y = height // 2 + int(100 * np.sin(self.counter * 0.05))
                center_x = width // 2 + int(100 * np.cos(self.counter * 0.05))
                radius = 80
                
                # Desenhar c√≠rculo branco grande
                for y in range(max(0, center_y - radius), min(height, center_y + radius)):
                    for x in range(max(0, center_x - radius), min(width, center_x + radius)):
                        if (x - center_x) ** 2 + (y - center_y) ** 2 <= radius ** 2:
                            frame_data[y, x] = [255, 255, 255]
                
                # Texto grande do contador
                import cv2
                text = f"TEST FRAME {self.counter}"
                cv2.putText(frame_data, text, (50, 100), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 0), 4)
                cv2.putText(frame_data, "WEBRTC TEST", (50, 400), cv2.FONT_HERSHEY_SIMPLEX, 2, (0, 0, 0), 4)
                
                # Converter para av.VideoFrame
                frame = av.VideoFrame.from_ndarray(frame_data, format='rgb24')
                frame = frame.reformat(format='yuv420p')
                frame.pts = pts
                frame.time_base = time_base
                
                # Keyframe a cada 30 frames
                if self.counter % 30 == 0:
                    frame.key_frame = True
                    if self.counter % 90 == 0:  # Log keyframes ocasionalmente
                        logger.info(f"üîë TEST TRACK: Keyframe #{self.counter} enviado")
                
                self.counter += 1
                return frame
        
        return TestVideoTrack()
    
    async def run(self):
        """Iniciar o servidor"""
        try:
            # Configurar logging de WebRTC
            logging.basicConfig(level=logging.DEBUG)
            
            # Configurar range de portas UDP FIXO para WebRTC com monitoramento
            import os
            udp_range = os.environ.get('AIORTC_UDP_PORT_RANGE', '40000-40100')
            os.environ['AIORTC_UDP_PORT_RANGE'] = udp_range
            
            # Aplicar configura√ß√µes strict se ativado
            if os.environ.get('AIORTC_STRICT_PORT_RANGE', 'false').lower() == 'true':
                logger.info(f"üîí Modo STRICT: Apenas portas {udp_range} permitidas para ICE")
            
            logger.info(f"üîß Range de portas UDP FIXO configurado: {udp_range}")
            
            # Configurar logging detalhado para debugging
            self._setup_detailed_logging()
            
            # Exibir informa√ß√µes do ambiente
            host_network = os.getenv('WEBRTC_HOST_NETWORK', 'false').lower() == 'true'
            public_ip = os.getenv('WEBRTC_PUBLIC_IP', '127.0.0.1')
            logger.info(f"üåê WebRTC Server em modo host network: {host_network}")
            logger.info(f"üåê WebRTC Public IP configurado: {public_ip}")
            
            # Configura√ß√£o simples de rede
            logger.info("üåê Configurando WebRTC para conectividade local")
            
            # Iniciar processo de reconhecimento
            await self.start_recognition_worker_process()
            
            # Iniciar servidor HTTP
            runner = web.AppRunner(self.app)
            await runner.setup()
            
            site = web.TCPSite(runner, self.host, self.port)
            await site.start()
            
            logger.info(f"üöÄ WebRTC Server rodando em http://{self.host}:{self.port}")
            
            # Manter o servidor rodando
            while True:
                await asyncio.sleep(3600)  # 1 hora
                
        except KeyboardInterrupt:
            logger.info("WebRTC Server interrompido pelo usu√°rio")
        except Exception as e:
            logger.error(f"Erro ao iniciar WebRTC Server: {e}")
            raise


def configure_udp_bypass():
    """Configura√ß√£o avan√ßada de rede com teste de portas UDP"""
    import socket
    import os
    
    logger.info("üåê Configura√ß√£o de rede WebRTC inicializada")
    
    # Verificar range de portas UDP configurado
    udp_range = os.environ.get('AIORTC_UDP_PORT_RANGE', '40000-40100')
    min_port, max_port = map(int, udp_range.split('-'))
    
    logger.info(f"üîç Testando disponibilidade de portas UDP: {udp_range}")
    
    # Testar algumas portas do range
    available_ports = []
    test_ports = [min_port, min_port + 1, min_port + 2, max_port - 2, max_port - 1, max_port]
    
    for port in test_ports:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.bind(('0.0.0.0', port))
            available_ports.append(port)
            sock.close()
        except OSError as e:
            logger.warning(f"‚ö†Ô∏è Porta UDP {port} n√£o dispon√≠vel: {e}")
    
    if available_ports:
        logger.info(f"‚úÖ Portas UDP dispon√≠veis: {available_ports}")
        logger.info(f"üéØ ICE candidates usar√£o apenas o range {udp_range}")
        return True
    else:
        logger.error(f"‚ùå Nenhuma porta UDP dispon√≠vel no range {udp_range}!")
        return False


if __name__ == "__main__":
    import sys
    import os
    
    # Configurar logging
    logger.remove()
    logger.add(
        sys.stdout,
        format="<green>{time:HH:mm:ss}</green> | <cyan>WEBRTC</cyan> | <level>{level}</level> | {message}",
        level="INFO"
    )
    
    logger.info("üöÄ Iniciando WebRTC Server...")
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Working directory: {os.getcwd()}")
    
    # Configurar bypass de firewall para UDP
    configure_udp_bypass()
    
    # Verificar depend√™ncias
    try:
        import aiortc
        logger.info(f"‚úÖ aiortc version: {aiortc.__version__}")
    except ImportError as e:
        logger.error(f"‚ùå aiortc not available: {e}")
    
    try:
        import aiohttp
        logger.info(f"‚úÖ aiohttp available")
    except ImportError as e:
        logger.error(f"‚ùå aiohttp not available: {e}")
    
    # Obter porta da vari√°vel de ambiente
    webrtc_port = int(os.environ.get("WEBRTC_PORT", 8080))
    logger.info(f"üîå Usando porta WebRTC: {webrtc_port}")
    
    # Inicializar e executar servidor
    logger.info("üîß Inicializando WebRTC Server...")
    server = WebRTCServer(host="0.0.0.0", port=webrtc_port)
    
    try:
        logger.info("‚ñ∂Ô∏è  Executando WebRTC Server...")
        asyncio.run(server.run())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è  Servidor interrompido pelo usu√°rio")
    except Exception as e:
        logger.error(f"üí• Erro fatal no WebRTC Server: {e}")
        raise