#!/bin/bash

# Script para inicializar WebRTC Server
# WebRTC + GStreamer CUDA + InsightFace + FAISS

echo "üöÄ Iniciando WebRTC Server para Recognition System..."

# Verificar se est√° no diret√≥rio correto
if [ ! -f "app/webrtc_worker/webrtc_server.py" ]; then
    echo "‚ùå Erro: Execute este script do diret√≥rio raiz do projeto"
    exit 1
fi

# Configurar vari√°veis de ambiente
export PYTHONPATH="$(pwd)"
export INSIGHTFACE_HOME="$(pwd)/data/models"
export CUDA_VISIBLE_DEVICES=0
export USE_GPU=true
export DEVELOPMENT=true

# Verificar depend√™ncias CUDA
echo "üîç Verificando CUDA..."
if command -v nvidia-smi &> /dev/null; then
    nvidia-smi --query-gpu=name,memory.total,memory.free --format=csv,noheader,nounits
    echo "‚úÖ CUDA dispon√≠vel"
else
    echo "‚ö†Ô∏è CUDA n√£o encontrado - usando CPU"
    export USE_GPU=false
fi

# Verificar GStreamer
echo "üîç Verificando GStreamer..."
if command -v gst-inspect-1.0 &> /dev/null; then
    GST_VERSION=$(gst-inspect-1.0 --version | head -n1)
    echo "‚úÖ $GST_VERSION"
    
    # Verificar plugins essenciais
    if gst-inspect-1.0 nvh264dec &> /dev/null; then
        echo "‚úÖ NVDEC dispon√≠vel"
    else
        echo "‚ö†Ô∏è NVDEC n√£o encontrado - usando software decode"
    fi
    
    if gst-inspect-1.0 rtspsrc &> /dev/null; then
        echo "‚úÖ RTSP suportado"
    else
        echo "‚ùå Plugin RTSP n√£o encontrado"
    fi
else
    echo "‚ùå GStreamer n√£o encontrado"
    echo "Instale com: sudo apt-get install gstreamer1.0-* python3-gi"
    exit 1
fi

# Verificar Python dependencies
echo "üîç Verificando depend√™ncias Python..."
python3 -c "
import sys
missing = []

try:
    import aiortc
    print(f'‚úÖ aiortc {aiortc.__version__}')
except ImportError:
    missing.append('aiortc')

try:
    import aiohttp
    print(f'‚úÖ aiohttp {aiohttp.__version__}')
except ImportError:
    missing.append('aiohttp')

try:
    import cv2
    print(f'‚úÖ opencv {cv2.__version__}')
except ImportError:
    missing.append('opencv-python')

try:
    import numpy as np
    print(f'‚úÖ numpy {np.__version__}')
except ImportError:
    missing.append('numpy')

try:
    import gi
    gi.require_version('Gst', '1.0')
    from gi.repository import Gst
    print(f'‚úÖ GStreamer Python bindings')
except ImportError:
    missing.append('python3-gi gir1.2-gstreamer-1.0')

try:
    import insightface
    print(f'‚úÖ insightface {insightface.__version__}')
except ImportError:
    missing.append('insightface')

try:
    import faiss
    print(f'‚úÖ faiss')
except ImportError:
    missing.append('faiss-cpu ou faiss-gpu')

if missing:
    print(f'‚ùå Depend√™ncias faltantes: {missing}')
    sys.exit(1)
else:
    print('‚úÖ Todas as depend√™ncias dispon√≠veis')
"

if [ $? -ne 0 ]; then
    echo "‚ùå Instale as depend√™ncias faltantes"
    echo "pip install -r requirements.txt"
    exit 1
fi

# Criar diret√≥rios necess√°rios
echo "üìÅ Criando diret√≥rios..."
mkdir -p data/models
mkdir -p data/embeddings  
mkdir -p data/images
mkdir -p data/frames
mkdir -p logs

echo "‚úÖ Diret√≥rios criados"

# Verificar se Recognition Worker est√° rodando
echo "üîç Verificando Recognition Worker..."
RECOGNITION_URL=${RECOGNITION_WORKER_URL:-"http://localhost:9001"}
if curl -f -s $RECOGNITION_URL/health &> /dev/null; then
    echo "‚úÖ Recognition Worker est√° rodando em $RECOGNITION_URL"
else
    echo "‚ö†Ô∏è Recognition Worker n√£o encontrado em $RECOGNITION_URL"
    echo "   WebRTC Server funcionar√° com funcionalidade limitada"
fi

# Verificar se API est√° rodando
echo "üîç Verificando API..."
API_URL=${API_BASE_URL:-"http://localhost:9000"}
if curl -f -s $API_URL/health &> /dev/null; then
    echo "‚úÖ API est√° rodando em $API_URL"
else
    echo "‚ö†Ô∏è API n√£o encontrada em $API_URL"
    echo "   Algumas funcionalidades podem n√£o funcionar"
fi

# Configura√ß√µes finais
echo "‚öôÔ∏è Configura√ß√µes:"
echo "   - Porta WebRTC: 8080"
echo "   - CUDA: $USE_GPU"
echo "   - Modo: DEVELOPMENT"
echo "   - Python Path: $PYTHONPATH"
echo "   - InsightFace Home: $INSIGHTFACE_HOME"

# Iniciar servidor
echo ""
echo "üé¨ Iniciando WebRTC Server..."
echo "   URL: http://localhost:8080"
echo "   Health Check: http://localhost:8080/health"
echo "   Status: http://localhost:8080/status"
echo ""
echo "üìä Para monitorar:"
echo "   - Logs: tail -f logs/webrtc.log"
echo "   - GPU: watch -n1 nvidia-smi"
echo "   - Sistema: htop"
echo ""
echo "üõë Para parar: Ctrl+C"
echo ""

# Executar servidor
cd "$(dirname "$0")/.." && python3 -m app.webrtc_worker.webrtc_server