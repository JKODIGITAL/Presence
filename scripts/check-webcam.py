#!/usr/bin/env python3
"""
Script para verificar disponibilidade de webcam
√ötil para diagn√≥stico em ambientes Docker/WSL2
"""

import cv2
import sys
import os
from pathlib import Path

def check_video_devices():
    """Verificar dispositivos de v√≠deo dispon√≠veis"""
    print("üîç Verificando dispositivos de v√≠deo...")
    
    # Verificar dispositivos /dev/video*
    video_devices = []
    for i in range(10):
        device_path = f"/dev/video{i}"
        if os.path.exists(device_path):
            video_devices.append(device_path)
    
    if video_devices:
        print(f"‚úÖ Dispositivos de v√≠deo encontrados: {video_devices}")
    else:
        print("‚ùå Nenhum dispositivo de v√≠deo encontrado em /dev/video*")
    
    return video_devices

def test_opencv_camera(camera_index):
    """Testar abertura de c√¢mera com OpenCV"""
    print(f"üé• Testando c√¢mera {camera_index}...")
    
    try:
        cap = cv2.VideoCapture(camera_index)
        
        if not cap.isOpened():
            print(f"‚ùå N√£o foi poss√≠vel abrir a c√¢mera {camera_index}")
            return False
        
        # Tentar capturar um frame
        ret, frame = cap.read()
        if ret:
            height, width = frame.shape[:2]
            print(f"‚úÖ C√¢mera {camera_index} funcionando - Resolu√ß√£o: {width}x{height}")
            cap.release()
            return True
        else:
            print(f"‚ùå N√£o foi poss√≠vel capturar frame da c√¢mera {camera_index}")
            cap.release()
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao testar c√¢mera {camera_index}: {e}")
        return False

def check_opencv_backends():
    """Verificar backends dispon√≠veis no OpenCV"""
    print("üìö Backends dispon√≠veis no OpenCV:")
    
    backends = [
        (cv2.CAP_V4L2, "V4L2"),
        (cv2.CAP_GSTREAMER, "GStreamer"),
        (cv2.CAP_FFMPEG, "FFMPEG"),
        (cv2.CAP_DSHOW, "DirectShow"),
    ]
    
    for backend_id, backend_name in backends:
        try:
            cap = cv2.VideoCapture(0, backend_id)
            if cap.isOpened():
                print(f"‚úÖ {backend_name} - Dispon√≠vel")
                cap.release()
            else:
                print(f"‚ùå {backend_name} - N√£o dispon√≠vel")
        except:
            print(f"‚ùå {backend_name} - Erro")

def check_docker_environment():
    """Verificar se est√° rodando em Docker"""
    print("üê≥ Verificando ambiente Docker...")
    
    # Verificar se est√° em container
    if os.path.exists("/.dockerenv"):
        print("‚úÖ Rodando em container Docker")
    else:
        print("‚ùå N√£o est√° rodando em container Docker")
    
    # Verificar permiss√µes de dispositivos
    if os.path.exists("/dev"):
        dev_contents = os.listdir("/dev")
        video_devs = [d for d in dev_contents if d.startswith("video")]
        print(f"üìÅ Dispositivos de v√≠deo em /dev: {video_devs if video_devs else 'Nenhum'}")

def show_troubleshooting_tips():
    """Mostrar dicas de resolu√ß√£o de problemas"""
    print("\nüîß DICAS DE RESOLU√á√ÉO DE PROBLEMAS:")
    print("="*50)
    
    print("\nüìã Para Windows + WSL2 + Docker:")
    print("1. Certifique-se que a webcam est√° conectada ao Windows")
    print("2. Verifique se o Docker Desktop est√° configurado para usar WSL2")
    print("3. Execute: lsusb (para ver dispositivos USB)")
    print("4. Execute: ls -la /dev/video* (para ver dispositivos de v√≠deo)")
    
    print("\nüê≥ Para Docker:")
    print("1. Certifique-se que os dispositivos est√£o mapeados no docker-compose.yml:")
    print("   devices:")
    print("     - /dev/video0:/dev/video0")
    print("     - /dev/video1:/dev/video1")
    print("2. Use privileged: true no container")
    print("3. Volume: /dev:/dev")
    
    print("\nüíª Para testar manualmente:")
    print("1. docker exec -it presence-camera-worker bash")
    print("2. ls -la /dev/video*")
    print("3. python -c \"import cv2; cap=cv2.VideoCapture(0); print(cap.isOpened())\"")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ DIAGN√ìSTICO DE WEBCAM - Presence System")
    print("="*50)
    
    # Verificar ambiente
    check_docker_environment()
    print()
    
    # Verificar dispositivos
    video_devices = check_video_devices()
    print()
    
    # Verificar backends do OpenCV
    check_opencv_backends()
    print()
    
    # Testar c√¢meras
    working_cameras = []
    for i in range(5):  # Testar √≠ndices 0-4
        if test_opencv_camera(i):
            working_cameras.append(i)
    
    print(f"\nüìä RESUMO:")
    print("="*30)
    print(f"Dispositivos de v√≠deo encontrados: {len(video_devices)}")
    print(f"C√¢meras funcionando: {working_cameras if working_cameras else 'Nenhuma'}")
    
    if not working_cameras:
        print("\n‚ùå PROBLEMA DETECTADO: Nenhuma c√¢mera funcional encontrada")
        show_troubleshooting_tips()
    else:
        print(f"\n‚úÖ SUCCESS: {len(working_cameras)} c√¢mera(s) funcionando")

if __name__ == "__main__":
    main()