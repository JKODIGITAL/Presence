#!/bin/bash

# Build incremental - apenas o que foi modificado
echo "üöÄ Build Incremental - Presence System"
echo "====================================="

# Verificar se Docker est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Use o Docker Desktop no Windows."
    echo "üí° Execute este script no terminal do Windows ou configure WSL integration"
    exit 1
fi

# Fun√ß√£o para verificar se imagem existe
image_exists() {
    docker images --format "table {{.Repository}}:{{.Tag}}" | grep -q "$1"
}

# Fun√ß√£o para verificar √∫ltima modifica√ß√£o dos Dockerfiles
dockerfile_newer_than_image() {
    local dockerfile=$1
    local image=$2
    
    if ! image_exists "$image"; then
        return 0  # Imagem n√£o existe, precisa buildar
    fi
    
    if [ ! -f "$dockerfile" ]; then
        return 1  # Dockerfile n√£o existe, n√£o precisa buildar
    fi
    
    # Verificar se Dockerfile foi modificado depois da imagem
    local dockerfile_time=$(stat -c %Y "$dockerfile" 2>/dev/null || echo 0)
    local image_time=$(docker inspect "$image" --format='{{.Created}}' 2>/dev/null | xargs -I {} date -d {} +%s 2>/dev/null || echo 0)
    
    [ "$dockerfile_time" -gt "$image_time" ]
}

echo "üîç Verificando quais imagens precisam ser reconstru√≠das..."

BUILD_LIST=()

# Verificar cada componente
echo ""
echo "üìã Status das imagens:"

# Base Images
if dockerfile_newer_than_image "docker/Dockerfile.common-base" "presence-common-base:latest"; then
    echo "üîÑ presence-common-base: PRECISA REBUILD"
    BUILD_LIST+=("presence-common-base")
else
    echo "‚úÖ presence-common-base: OK"
fi

if dockerfile_newer_than_image "docker/Dockerfile.worker-base" "presence-worker-base:latest"; then
    echo "üîÑ presence-worker-base: PRECISA REBUILD" 
    BUILD_LIST+=("presence-worker-base")
else
    echo "‚úÖ presence-worker-base: OK"
fi

if dockerfile_newer_than_image "docker/Dockerfile.api-base" "presence-api-base:latest"; then
    echo "üîÑ presence-api-base: PRECISA REBUILD"
    BUILD_LIST+=("presence-api-base") 
else
    echo "‚úÖ presence-api-base: OK"
fi

if dockerfile_newer_than_image "docker/Dockerfile.frontend-base" "presence-frontend-base:latest"; then
    echo "üîÑ presence-frontend-base: PRECISA REBUILD"
    BUILD_LIST+=("presence-frontend-base")
else
    echo "‚úÖ presence-frontend-base: OK"
fi

# Service Images
if dockerfile_newer_than_image "docker/Dockerfile.api" "presence_presence-api:latest"; then
    echo "üîÑ presence-api: PRECISA REBUILD"
    BUILD_LIST+=("presence-api")
else
    echo "‚úÖ presence-api: OK"
fi

if dockerfile_newer_than_image "docker/Dockerfile.recognition-worker" "presence_presence-recognition-worker:latest"; then
    echo "üîÑ presence-recognition-worker: PRECISA REBUILD"
    BUILD_LIST+=("presence-recognition-worker")
else
    echo "‚úÖ presence-recognition-worker: OK"
fi

if dockerfile_newer_than_image "docker/Dockerfile.worker" "presence_presence-camera-worker:latest"; then
    echo "üîÑ presence-camera-worker: PRECISA REBUILD"
    BUILD_LIST+=("presence-camera-worker")
else
    echo "‚úÖ presence-camera-worker: OK"
fi

if dockerfile_newer_than_image "docker/Dockerfile.webrtc" "presence_presence-webrtc-server:latest"; then
    echo "üîÑ presence-webrtc-server: PRECISA REBUILD"
    BUILD_LIST+=("presence-webrtc-server")
else
    echo "‚úÖ presence-webrtc-server: OK"
fi

if dockerfile_newer_than_image "docker/Dockerfile.frontend" "presence_presence-frontend:latest"; then
    echo "üîÑ presence-frontend: PRECISA REBUILD"
    BUILD_LIST+=("presence-frontend")
else
    echo "‚úÖ presence-frontend: OK"
fi

echo ""

# Verificar se h√° algo para buildar
if [ ${#BUILD_LIST[@]} -eq 0 ]; then
    echo "‚úÖ Todas as imagens est√£o atualizadas!"
    echo ""
    echo "üöÄ Para iniciar o sistema:"
    echo "   docker compose up -d"
    exit 0
fi

echo "üîß Imagens que ser√£o reconstru√≠das: ${BUILD_LIST[*]}"
echo ""

# Confirmar com usu√°rio
read -p "Deseja prosseguir com o build incremental? (Y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Nn]$ ]]; then
    echo "‚ùå Build cancelado pelo usu√°rio"
    exit 1
fi

echo ""
echo "üèóÔ∏è Iniciando build incremental..."

# Determinar comando do Docker Compose
if docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    DOCKER_COMPOSE="docker-compose"
fi

# Build incremental na ordem correta de depend√™ncias
for service in "${BUILD_LIST[@]}"; do
    echo ""
    echo "üî® Building $service..."
    
    case $service in
        "presence-common-base"|"presence-worker-base"|"presence-api-base"|"presence-frontend-base")
            # Base images
            $DOCKER_COMPOSE build --no-cache "$service"
            ;;
        *)
            # Service images
            $DOCKER_COMPOSE build "$service"
            ;;
    esac
    
    if [ $? -eq 0 ]; then
        echo "‚úÖ $service conclu√≠do"
    else
        echo "‚ùå Falha no build de $service"
        exit 1
    fi
done

echo ""
echo "üéâ Build incremental conclu√≠do com sucesso!"
echo ""
echo "üìä Resumo:"
echo "   - Imagens reconstru√≠das: ${#BUILD_LIST[@]}"
echo "   - Servi√ßos: ${BUILD_LIST[*]}"
echo ""
echo "üöÄ Para iniciar o sistema:"
echo "   $DOCKER_COMPOSE up -d"
echo ""
echo "üåê URLs ap√≥s inicializa√ß√£o:"
echo "   - API: http://localhost:9000"
echo "   - Frontend: http://localhost:3000" 
echo "   - WebRTC: http://localhost:8080"
echo "   - Recognition Worker: http://localhost:9001"