#!/usr/bin/env python3
"""
Script para verificar se o pipeline de alta performance est√° funcionando
"""

import sys
import os
from pathlib import Path

# Adicionar path do projeto
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_imports():
    """Testar todas as importa√ß√µes necess√°rias"""
    print("üîç Verificando importa√ß√µes do pipeline de performance...")
    
    try:
        # Testar config
        from app.core.config import settings
        print("‚úÖ Config importado")
        
        # Testar performance modules
        from app.core.performance.manager import PerformanceManager
        print("‚úÖ PerformanceManager importado")
        
        from app.core.performance.camera_worker import CameraWorker, FrameData, RecognitionResult
        print("‚úÖ CameraWorker importado")
        
        from app.core.performance.recognition_engine import GPURecognitionEngine
        print("‚úÖ GPURecognitionEngine importado")
        
        from app.core.performance.pipeline_factory import GStreamerPipelineFactory
        print("‚úÖ GStreamerPipelineFactory importado")
        
        # Testar worker principal
        from app.camera_worker.performance_worker import PerformanceWorkerMain
        print("‚úÖ PerformanceWorkerMain importado")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Erro de importa√ß√£o: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        return False

def test_gstreamer():
    """Testar disponibilidade do GStreamer"""
    print("\nüé• Verificando GStreamer...")
    
    try:
        import gi
        gi.require_version('Gst', '1.0')
        from gi.repository import Gst
        
        if not Gst.is_initialized():
            Gst.init(None)
        
        if Gst.is_initialized():
            version = Gst.version_string()
            print(f"‚úÖ GStreamer dispon√≠vel: {version}")
            
            # Verificar plugins cr√≠ticos
            registry = Gst.Registry.get()
            plugins = ['rtspsrc', 'v4l2src', 'appsink', 'videoconvert']
            
            for plugin in plugins:
                element = registry.find_feature(plugin, Gst.ElementFactory.__gtype__)
                if element:
                    print(f"‚úÖ Plugin {plugin} dispon√≠vel")
                else:
                    print(f"‚ùå Plugin {plugin} n√£o encontrado")
            
            # Verificar NVDEC
            nvh264dec = registry.find_feature("nvh264dec", Gst.ElementFactory.__gtype__)
            if nvh264dec:
                print("‚úÖ NVDEC (nvh264dec) dispon√≠vel - decodifica√ß√£o por hardware habilitada")
            else:
                print("‚ö†Ô∏è NVDEC n√£o dispon√≠vel - usando decodifica√ß√£o por software")
            
            return True
        else:
            print("‚ùå GStreamer n√£o foi inicializado")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no GStreamer: {e}")
        return False

def test_gpu():
    """Testar disponibilidade de GPU"""
    print("\nüöÄ Verificando GPU/CUDA...")
    
    try:
        # Testar PyTorch CUDA
        import torch
        if torch.cuda.is_available():
            device_name = torch.cuda.get_device_name(0)
            print(f"‚úÖ PyTorch CUDA dispon√≠vel: {device_name}")
        else:
            print("‚ö†Ô∏è PyTorch CUDA n√£o dispon√≠vel")
    except ImportError:
        print("‚ö†Ô∏è PyTorch n√£o instalado")
    
    try:
        # Testar ONNX Runtime GPU
        import onnxruntime as ort
        providers = ort.get_available_providers()
        if 'CUDAExecutionProvider' in providers:
            print("‚úÖ ONNX Runtime GPU dispon√≠vel")
        else:
            print("‚ö†Ô∏è ONNX Runtime GPU n√£o dispon√≠vel")
    except ImportError:
        print("‚ö†Ô∏è ONNX Runtime n√£o instalado")
    
    try:
        # Testar FAISS GPU
        import faiss
        print(f"‚úÖ FAISS dispon√≠vel: vers√£o {faiss.__version__}")
        
        # Testar FAISS GPU
        try:
            res = faiss.StandardGpuResources()
            index = faiss.IndexFlatIP(512)
            gpu_index = faiss.index_cpu_to_gpu(res, 0, index)
            print("‚úÖ FAISS GPU dispon√≠vel")
        except Exception as e:
            print(f"‚ö†Ô∏è FAISS GPU n√£o dispon√≠vel: {e}")
    except ImportError:
        print("‚ùå FAISS n√£o instalado")

def test_insightface():
    """Testar InsightFace"""
    print("\nüß† Verificando InsightFace...")
    
    try:
        # Testar importa√ß√£o
        try:
            from insightface import FaceAnalysis
        except ImportError:
            from insightface.app import FaceAnalysis
        
        print("‚úÖ InsightFace importado")
        
        # Verificar se pode inicializar
        providers = ['CPUExecutionProvider']  # Usar CPU para teste
        app = FaceAnalysis(name='antelopev2', providers=providers)
        print("‚úÖ FaceAnalysis criado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no InsightFace: {e}")
        return False

def test_pipeline_creation():
    """Testar cria√ß√£o de pipeline"""
    print("\nüîß Testando cria√ß√£o de pipeline...")
    
    try:
        from app.core.performance.pipeline_factory import GStreamerPipelineFactory
        
        # Testar pipeline para webcam
        webcam_config = {
            'url': '0',
            'type': 'webcam',
            'fps_limit': 10
        }
        
        pipeline = GStreamerPipelineFactory.auto_create_pipeline(webcam_config, 'recognition')
        print("‚úÖ Pipeline para webcam criado")
        print(f"   Pipeline: {pipeline[:100]}...")
        
        # Testar pipeline RTSP
        rtsp_config = {
            'url': 'rtsp://test:test@192.168.1.100/stream1',
            'type': 'rtsp',
            'fps_limit': 10
        }
        
        pipeline = GStreamerPipelineFactory.auto_create_pipeline(rtsp_config, 'recognition')
        print("‚úÖ Pipeline RTSP criado")
        print(f"   Pipeline: {pipeline[:100]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na cria√ß√£o de pipeline: {e}")
        return False

def test_performance_manager():
    """Testar Performance Manager"""
    print("\nüìä Testando Performance Manager...")
    
    try:
        from app.core.performance.manager import PerformanceManager
        
        manager = PerformanceManager()
        print("‚úÖ PerformanceManager criado")
        
        # Testar start/stop
        if manager.start():
            print("‚úÖ PerformanceManager iniciado")
            manager.stop()
            print("‚úÖ PerformanceManager parado")
            return True
        else:
            print("‚ùå Falha ao iniciar PerformanceManager")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro no PerformanceManager: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üîç VERIFICA√á√ÉO DO PIPELINE DE ALTA PERFORMANCE")
    print("=" * 60)
    
    results = []
    
    # Executar todos os testes
    results.append(("Importa√ß√µes", test_imports()))
    results.append(("GStreamer", test_gstreamer()))
    results.append(("GPU/CUDA", test_gpu()))
    results.append(("InsightFace", test_insightface()))
    results.append(("Pipeline Creation", test_pipeline_creation()))
    results.append(("Performance Manager", test_performance_manager()))
    
    # Resumo
    print("\n" + "=" * 60)
    print("üìã RESUMO DOS TESTES")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"{test_name:20} {status}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{total} testes passaram")
    
    if passed == total:
        print("\nüéâ TODOS OS TESTES PASSARAM!")
        print("üöÄ O pipeline de alta performance est√° pronto para uso!")
        print("\nPara ativar, certifique-se de que:")
        print("- USE_PERFORMANCE_WORKER=true")
        print("- USE_GPU=true")
        print("- GStreamer est√° instalado")
        print("- GPU NVIDIA com drivers CUDA")
    else:
        print(f"\n‚ö†Ô∏è {total - passed} testes falharam")
        print("Verifique os erros acima e instale as depend√™ncias necess√°rias")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)