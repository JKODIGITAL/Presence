# Script para construir as imagens Docker do projeto Presence (Windows)

# Fun√ß√£o para exibir mensagens
function Log {
    param([string]$message)
    Write-Host "[$([DateTime]::Now.ToString('HH:mm:ss'))] $message" -ForegroundColor Blue
}

# Fun√ß√£o para exibir mensagens de sucesso
function Success {
    param([string]$message)
    Write-Host "[$([DateTime]::Now.ToString('HH:mm:ss'))] ‚úÖ $message" -ForegroundColor Green
}

# Fun√ß√£o para exibir avisos
function Warn {
    param([string]$message)
    Write-Host "[$([DateTime]::Now.ToString('HH:mm:ss'))] ‚ö†Ô∏è $message" -ForegroundColor Yellow
}

# Fun√ß√£o para exibir erros
function Error {
    param([string]$message)
    Write-Host "[$([DateTime]::Now.ToString('HH:mm:ss'))] ‚ùå $message" -ForegroundColor Red
}

# Verificar se o Docker est√° instalado
try {
    docker --version | Out-Null
} catch {
    Error "Docker n√£o est√° instalado. Por favor, instale o Docker primeiro."
    exit 1
}

# Verificar se o Docker Compose est√° instalado
$dockerCompose = "docker-compose"
try {
    & $dockerCompose --version | Out-Null
} catch {
    Warn "Docker Compose n√£o encontrado, tentando usar 'docker compose'..."
    $dockerCompose = "docker compose"
    try {
        & docker compose version | Out-Null
    } catch {
        Error "Docker Compose n√£o est√° instalado. Por favor, instale o Docker Compose primeiro."
        exit 1
    }
}

# Criar diret√≥rios necess√°rios para scripts
if (-not (Test-Path "docker/scripts")) {
    New-Item -Path "docker/scripts" -ItemType Directory -Force | Out-Null
}

# Fun√ß√£o para construir as imagens base
function Build-BaseImages {
    Log "Construindo imagem base comum..."
    docker build -t presence-common-base:latest -f docker/Dockerfile.common-base .
    Success "Imagem base comum constru√≠da com sucesso!"

    Log "Construindo imagem base da API..."
    docker build -t presence-api-base:latest -f docker/Dockerfile.api-base .
    Success "Imagem base da API constru√≠da com sucesso!"

    Log "Construindo imagem base do Camera Worker..."
    docker build -t presence-worker-base:latest -f docker/Dockerfile.worker-base .
    Success "Imagem base do Camera Worker constru√≠da com sucesso!"

    Log "Construindo imagem base do Frontend..."
    docker build -t presence-frontend-base:latest -f docker/Dockerfile.frontend-base ./frontend
    Success "Imagem base do Frontend constru√≠da com sucesso!"
}

# Fun√ß√£o para construir as imagens de aplica√ß√£o
function Build-AppImages {
    Log "Construindo imagens de aplica√ß√£o com docker-compose..."
    & $dockerCompose build
    Success "Imagens de aplica√ß√£o constru√≠das com sucesso!"
}

# Menu principal
Write-Host "===================================================" -ForegroundColor Cyan
Write-Host "üê≥ Constru√ß√£o de Imagens Docker do Projeto Presence" -ForegroundColor Cyan
Write-Host "===================================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "Escolha uma op√ß√£o:"
Write-Host "1) Construir apenas imagens base"
Write-Host "2) Construir apenas imagens de aplica√ß√£o"
Write-Host "3) Construir todas as imagens (base + aplica√ß√£o)"
Write-Host "4) Iniciar servi√ßos com Hot Reload"
Write-Host "5) Parar todos os servi√ßos"
Write-Host "q) Sair"
Write-Host ""

$option = Read-Host "Op√ß√£o"

switch ($option) {
    "1" {
        Build-BaseImages
    }
    "2" {
        Build-AppImages
    }
    "3" {
        Build-BaseImages
        Build-AppImages
    }
    "4" {
        Log "Iniciando servi√ßos com Hot Reload..."
        & $dockerCompose up -d
        Success "Servi√ßos iniciados com sucesso!"
        Write-Host ""
        Write-Host "üìã Servi√ßos dispon√≠veis:" -ForegroundColor Cyan
        Write-Host "- API: http://localhost:9000"
        Write-Host "- Frontend: http://localhost"
    }
    "5" {
        Log "Parando todos os servi√ßos..."
        & $dockerCompose down
        Success "Servi√ßos parados com sucesso!"
    }
    "q" {
        Log "Saindo..."
        exit 0
    }
    default {
        Error "Op√ß√£o inv√°lida!"
        exit 1
    }
}

Write-Host ""
Success "Opera√ß√£o conclu√≠da com sucesso!" 