#!/bin/bash

# Script inteligente para build Docker com detec√ß√£o de GPU
# Verifica se NVIDIA GPU est√° dispon√≠vel e usa a configura√ß√£o apropriada

echo "üöÄ Build Inteligente do Sistema Presence"
echo "==========================================="

# Verificar se NVIDIA Docker est√° dispon√≠vel
GPU_AVAILABLE=false
if command -v nvidia-smi &> /dev/null; then
    if nvidia-smi &> /dev/null; then
        echo "‚úÖ NVIDIA GPU detectada:"
        nvidia-smi --query-gpu=name,memory.total --format=csv,noheader
        GPU_AVAILABLE=true
    else
        echo "‚ö†Ô∏è nvidia-smi encontrado mas GPU n√£o acess√≠vel"
    fi
else
    echo "‚ö†Ô∏è NVIDIA GPU n√£o detectada (nvidia-smi n√£o encontrado)"
fi

# Verificar se Docker Compose est√° dispon√≠vel
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n√£o encontrado. Instale o Docker primeiro."
    exit 1
fi

if ! command -v docker-compose &> /dev/null && ! docker compose version &> /dev/null; then
    echo "‚ùå Docker Compose n√£o encontrado."
    exit 1
fi

# Determinar comando do Docker Compose
if docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    DOCKER_COMPOSE="docker-compose"
fi

echo ""
echo "üîß Configura√ß√£o de Build:"
echo "   GPU Dispon√≠vel: $GPU_AVAILABLE"
echo "   Docker Compose: $DOCKER_COMPOSE"

# Escolher configura√ß√£o
if [ "$GPU_AVAILABLE" = true ]; then
    echo ""
    echo "üéØ Modo GPU detectado - usando configura√ß√£o otimizada"
    echo "   - WebRTC Server com CUDA"
    echo "   - Recognition Worker com GPU"
    echo "   - Camera Worker com hardware acceleration"
    
    read -p "Deseja usar GPU? (Y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        echo "üë§ Usu√°rio escolheu modo CPU"
        GPU_MODE=false
    else
        echo "üöÄ Usando modo GPU"
        GPU_MODE=true
    fi
else
    echo ""
    echo "üíª Modo CPU detectado - usando configura√ß√£o compat√≠vel"
    echo "   - WebRTC Server com fallback CPU"
    echo "   - Recognition Worker CPU-only"
    echo "   - Sem hardware acceleration"
    GPU_MODE=false
fi

echo ""
echo "üì¶ Iniciando build..."

# Build baseado na configura√ß√£o
if [ "$GPU_MODE" = true ]; then
    echo "üèóÔ∏è Building com suporte GPU..."
    $DOCKER_COMPOSE -f docker-compose.yml -f docker-compose.gpu.yml build --no-cache
    
    if [ $? -eq 0 ]; then
        echo ""
        echo "‚úÖ Build GPU conclu√≠do com sucesso!"
        echo ""
        echo "üöÄ Para iniciar com GPU:"
        echo "   $DOCKER_COMPOSE -f docker-compose.yml -f docker-compose.gpu.yml up"
    else
        echo ""
        echo "‚ùå Build GPU falhou. Tentando fallback CPU..."
        echo ""
        $DOCKER_COMPOSE build --no-cache
    fi
else
    echo "üèóÔ∏è Building modo CPU..."
    $DOCKER_COMPOSE build --no-cache
    
    if [ $? -eq 0 ]; then
        echo ""
        echo "‚úÖ Build CPU conclu√≠do com sucesso!"
        echo ""
        echo "üöÄ Para iniciar:"
        echo "   $DOCKER_COMPOSE up"
    else
        echo ""
        echo "‚ùå Build falhou. Verifique os logs acima."
        exit 1
    fi
fi

echo ""
echo "üìã Pr√≥ximos passos:"
echo "   1. docker compose up presence-api presence-recognition-worker"
echo "   2. docker compose up presence-webrtc-server"
echo "   3. docker compose up presence-frontend"
echo ""
echo "üåê URLs:"
echo "   - API: http://localhost:9000"
echo "   - Frontend: http://localhost:3000"
echo "   - WebRTC: http://localhost:8080"
echo "   - Recognition Worker: http://localhost:9001"
echo ""
echo "üìä Monitoramento:"
if [ "$GPU_MODE" = true ]; then
    echo "   - GPU: watch -n1 nvidia-smi"
fi
echo "   - Logs: docker compose logs -f"
echo "   - Sistema: htop"