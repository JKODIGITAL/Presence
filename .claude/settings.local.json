{
  "permissions": {
    "allow": [
      "Bash(mv:*)",
      "Bash(npm run lint)",
      "Bash(npx tsc:*)",
      "Bash(python:*)",
      "Bash(ls:*)",
      "Bash(docker-compose build:*)",
      "Bash(docker compose:*)",
      "Bash(chmod:*)",
      "Bash(rm:*)",
      "Bash(find:*)",
      "Bash(grep:*)",
      "Bash(npm run build:*)",
      "Bash(npm install)",
      "Bash(./node_modules/.bin/tsc:*)",
      "Bash(rg:*)",
      "Bash(npm install:*)",
      "Bash(touch:*)",
      "Bash(cat:*)",
      "Bash(docker logs:*)",
      "Bash(docker run:*)",
      "Bash(curl:*)",
      "Bash(docker.exe exec:*)",
      "Bash(docker.exe ps:*)",
      "Bash(docker.exe logs:*)",
      "Bash(./force-restart-webrtc.sh:*)",
      "Bash(sudo docker ps:*)",
      "Bash(nslookup:*)",
      "Bash(dig:*)",
      "Bash(docker stop:*)",
      "Bash(true)",
      "Bash(./run_webrtc_standalone.sh:*)",
      "Bash(fuser:*)",
      "Bash(docker exec:*)",
      "Bash(docker rm:*)",
      "Bash(conda run:*)",
      "Bash(pkill:*)",
      "Bash(kill:*)",
      "Bash(scripts/setup_wsl_for_windows.sh:*)",
      "Bash(source ~/.bashrc)",
      "Bash(conda:*)",
      "Bash(export PATH=\"$HOME/miniconda3/bin:$PATH\")",
      "Bash(mkdir:*)",
      "Bash(./scripts/complete_setup_wsl.sh:*)",
      "Bash(cp:*)",
      "Bash(PYTHONPATH=/mnt/d/Projetopresence/presence python3 -c \"\nfrom app.database.database import engine, Base\nfrom app.database import models\nfrom sqlalchemy import text\n\nprint(''=== Creating unknown_people table ==='')\n\n# Create unknown_people table\ntry:\n    # Check if table exists\n    with engine.connect() as conn:\n        result = conn.execute(text(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND name=\"\"unknown_people\"\"''))\n        exists = result.fetchone()\n        \n    if not exists:\n        print(''Creating unknown_people table...'')\n        models.UnknownPerson.__table__.create(engine)\n        print(''‚úÖ unknown_people table created successfully'')\n    else:\n        print(''‚úÖ unknown_people table already exists'')\n        \n    # Verify table structure\n    with engine.connect() as conn:\n        result = conn.execute(text(''PRAGMA table_info(unknown_people)''))\n        columns = result.fetchall()\n        print(f''üìä Table has {len(columns)} columns:'')\n        for col in columns:\n            print(f''  - {col[1]} ({col[2]})'')\n            \nexcept Exception as e:\n    print(f''‚ùå Error creating table: {e}'')\n    import traceback\n    traceback.print_exc()\n\")",
      "Bash(PYTHONPATH=/mnt/d/Projetopresence/presence python test_unknown_detection_system.py)",
      "Bash(pip install:*)",
      "Bash(PYTHONPATH:*)",
      "Bash(/home/pikachu/miniconda3/bin/pip install sqlalchemy fastapi loguru numpy opencv-contrib-python pillow)",
      "Bash(/home/pikachu/miniconda3/bin/pip install pydantic==1.10.12)",
      "Bash(/home/pikachu/miniconda3/bin/pip install python-dotenv)",
      "Bash(/home/pikachu/miniconda3/bin/pip install fastapi==0.104.1 starlette==0.27.0)",
      "Bash(source:*)"
    ],
    "deny": []
  }
}